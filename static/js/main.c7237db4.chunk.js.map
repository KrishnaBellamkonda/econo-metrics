{"version":3,"sources":["components/pics/phone_person_buildings.jpg","components/LandingPage.js","components/BarChart.js","components/LineChart.js","components/OneCountryResults.js","components/functions/finalQueries.js","components/OneCountry.js","components/DoughnutChart.js","components/MapVisualization.js","components/PopularPage.js","components/WorldAtAGlance.js","App.js","reportWebVitals.js","index.js"],"names":["landingPageStyle","hero","LandingPage","className","style","backgroundImage","href","viewBox","width","height","y","BarChart","props","indicatorNames","state","worldState","labelsArray","Object","keys","forEach","item","push","backgroundColor","color","optionsObject","dataArray","settings","scales","beginAtZero","ticks","x","plugins","legend","labels","data","datasets","label","countryName","borderColor","borderWidth","world","type","key","worldDataArray","worldDataset","options","LineChart","gdp_series","ai_prediction","console","log","displayEditing","value","indicator","Math","round","pow","toFixed","filterQuery","indicators","filteredObject","index","includes","OneCountryResults","queryState","worldQueryState","object","swapedKeyValue","values","keyValueSwap","macroState","tradeState","socialState","MACRO_VIZ","TRADE_VIZ","SOCIAL_VIZ","macroVisualizationData","tradeVisualizationData","socialVisualizationData","worldMacroVisualizationData","worldTradeVisualizationData","worldSocialVisualizationData","lineChartVisualizationData","map","filterRegionAPIResponse","dataObject","filter","valuesIdsExtraction","ids","countryiso3code","dataExtraction","indicatorsList","length","allValues","allIds","i","id","createCompleteQuery","countriesList","dateList","countries_list_length","countriesQuery","createCountryQuery","indicators_list_length","indicatorsQuery","createIndicatorQuery","date_list_length","dateQuery","createDateQuery","errorCodeCheck","metaDataObjectPrccessor","responseMetaData","isValid","message","dataLoopAggregator","metaDataObject","url","a","n_pages","pages","per_page","aggregateData","results","dataLoop","parseInt","URL","firstValues","pageNumber","pageAttribute","pageURL","pageData","fetch","response","json","concat","getAggregatedData","mean","PREPROCESSING_DATA","std","countries","codeToCountryName","countriesIds","ACTIONS","reducer","action","year","payload","yearChangeHandler","indicatorChangeHandler","country","countryChangeHandler","queryReducer","queryChangeHandler","queryNanHandler","newState","queryAIHandler","worldQueryReducer","INITIAL_STATE","QUERY_INITIAL_STATE","WORLD_QUERY_INITIAL_STATE","makeAIModelRequestFetch","inputs","input_object","post_object","method","mode","cache","headers","redirect","referrerPolicy","body","JSON","stringify","then","res","preprocessingAIInput","reverse","input","OneCountry","useReducer","formState","dispatch","queryDispatch","worldQueryDispatch","useEffect","onInput","e","target","htmlFor","max","min","onClick","countries_list","date_list","indicators_list","indicator_names_list","world_list","co2Query","queryFunctions","workdApiQuery","co2_results","worldCo2Query","oneCountrySection","filteredResults","preprocessed_inputs","predictions","final_prediction","getAIPredictions","React","memo","argSort","arr1","arr2","sort","arg1","DoughnutChart","sortedLabelsArray","sortedDataArray","indicatorName","maintainAspectRatio","dsu","MapVisualization","vizId","doughnutChartState","valuesArray","slice","sortCountries","sortedValues","class","popularIndicatorCodes","popularIndicatorNameToCode","strip","string","replace","popularPageQueryReducer","handlerQuery","POPULAR_QUERY_INITIAL_STATE","PopularPage","INDICATOR_NAMES","popularQueryState","dispatchQuery","DATE_LIST","POPULAR_SECTION_COUNTRIES","POPULAR_SECTION_INDICATORS","countryNameToValue","itemIndex","countryId","dataPoint","unshift","popularSection","document","scrollWidth","documentElement","offsetWidth","clientWidth","scrollHeight","offsetHeight","clientHeight","name","indicatorCodeToName","worldAtAGlanceIndicatorNames","WAC_FORM","WAC_QUERY","WAC_ACTIONS","formHandler","queryHandler","WACReducer","WACQueryReducer","WorldAtAGlancePage","WACDispatch","WACQueryState","WACDispatchQuery","regions_indicators_list","region_indicator_names_list","regionNameToValue","worldAtAGlanceSection","regionsCodeToName","App","WorldAtAGlance","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c7237db4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/phone_person_buildings.7988dc9a.jpg\";","import React from 'react';\r\nimport hero from './pics/phone_person_buildings.jpg';\r\n\r\nconst landingPageStyle = `linear-gradient( rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5) ), \r\nurl(${hero})`;\r\n\r\nconst LandingPage = ()=>{\r\n    return (\r\n        <div className=\"landing-page\">\r\n            <div className=\"hero\" style={{\r\n                backgroundImage:landingPageStyle}}>\r\n                \r\n                <div className=\"grid-center container\">\r\n                    <div className=\"nav\">\r\n                        <a href=\"#sidebar-open\">\r\n                            <svg className=\"hamburger\" viewBox=\"0 0 100 80\" width=\"40\" height=\"40\">\r\n                                <rect width=\"100\" height=\"20\"></rect>\r\n                                <rect y=\"30\" width=\"100\" height=\"20\"></rect>\r\n                                <rect y=\"60\" width=\"100\" height=\"20\"></rect>\r\n                            </svg>\r\n                        </a>\r\n                        <nav>\r\n                            <ul className=\"nav-links\">\r\n                                <li><a href=\"#\">Home</a></li>\r\n                                <li><a href=\"#\">How to Use</a></li>\r\n                                <li><a href=\"#\">About Us</a></li>\r\n                            </ul>\r\n                        </nav>\r\n                    </div>\r\n\r\n                    <div className=\"landing-page-text\">\r\n                        <h1>EconoMetrics</h1>\r\n                        <h2>Analyze the world through indicators by one click</h2>\r\n                        <div className=\"buttons\">\r\n                            <a href=\"#explore\" className=\"explore\">Explore</a>\r\n                            <a href=\"#about-us\" className=\"about-us\">About us</a>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n            \r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LandingPage;","import React from 'react';\r\nimport {Bar} from 'react-chartjs-2';\r\n\r\n\r\nconst BarChart= (props)=>{\r\n\r\n    // Getting the Props \r\n    const indicatorNames = props.indicatorNames;\r\n    const state = props.state;\r\n    const worldState = props.worldState;\r\n\r\n    // console.log(worldState)\r\n\r\n    const labelsArray = [];\r\n    Object.keys(state).forEach((item)=>{\r\n        labelsArray.push(indicatorNames[item])\r\n    })\r\n    \r\n    const dataArray = [];\r\n    Object.keys(state).forEach((item)=>{\r\n        dataArray.push(state[item])\r\n    })\r\n\r\n    // Colors\r\n    let backgroundColor, color, optionsObject;\r\n    if(props.settings){\r\n        backgroundColor = props.settings.backgroundColor? props.settings.backgroundColor:'rgba(75,192,192,1)';\r\n        color = props.settings.color?props.settings.color: 'rgba(0, 0, 0, 0.1)';\r\n        // Using the Color value to change the color of ticks\r\n        optionsObject  = {\r\n           scales: {\r\n            y:{\r\n                beginAtZero: true,\r\n                ticks: {\r\n                    color:color\r\n                }\r\n            }, \r\n\r\n            x: {\r\n                ticks: {\r\n                    color:color\r\n                }\r\n            }\r\n\r\n            },\r\n\r\n            plugins:{\r\n\r\n                legend: {\r\n                    labels:{\r\n                        color:color\r\n                    }\r\n                    \r\n                }\r\n            }\r\n            \r\n            \r\n\r\n        }    \r\n    }\r\n\r\n    // The Data prop for the Bar Chart\r\n    const data  = {\r\n        labels: labelsArray,\r\n        datasets:[\r\n            {\r\n            label:props.countryName,  // Give Country Name\r\n            data: dataArray,\r\n            backgroundColor: backgroundColor,\r\n            borderColor: 'rgba(0,0,0,1)',\r\n            color:color,\r\n            borderWidth:1\r\n        }, \r\n    \r\n    ]\r\n    }\r\n\r\n\r\n\r\n\r\n    // If world is true then add the world Query Parameters\r\n    if (props.world){\r\n\r\n        if(props.type === 'trade'){\r\n            Object.keys(worldState).forEach((key)=>{\r\n                worldState[key] = worldState[key]/216\r\n            })\r\n        }\r\n\r\n        const worldDataArray = []\r\n        Object.keys(worldState).forEach((item)=>{\r\n            worldDataArray.push(worldState[item])\r\n        })\r\n\r\n        const worldDataset =  {\r\n                label:\"World Average\",\r\n                data:worldDataArray,\r\n                backgroundColor:'rgba(85, 150, 97, 0.6)',\r\n                borderColor:\"rgba(0, 0, 0, 1)\",\r\n                borderWidth: 1\r\n            }\r\n\r\n            data.datasets.push(worldDataset)\r\n    }\r\n\r\n\r\n\r\n    // Options prop for the Bar Chart\r\n    const options = {\r\n        scales:{\r\n            y: {\r\n                beginAtZero: true,\r\n                \r\n            }, \r\n\r\n\r\n        },\r\n\r\n        \r\n\r\n    }\r\n\r\n    // Plugins\r\n \r\n\r\n    return (\r\n        <Bar \r\n        data = {data}\r\n        options = {props.settings?optionsObject:options}\r\n\r\n        />\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default BarChart","import react from 'react';\r\nimport {Line} from 'react-chartjs-2'\r\n\r\nconst LineChart = (props)=>{\r\n\r\n    let gdp_series = [...props.state[\"gdp_series\"]];\r\n    const ai_prediction = props.state[\"gdp_prediction\"];\r\n    console.log(\"GDP series\", gdp_series)\r\n\r\n    const complete_series = gdp_series.push(ai_prediction);\r\n\r\n    const data = {\r\n        labels:[2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, \"AI pred for 2020\"],\r\n        datasets: [\r\n            {\r\n                label: props.countryName,\r\n                data: gdp_series,\r\n                borderColor: 'rgba(0,0,0,1)',\r\n                borderWidth:1, \r\n                backgroundColor: [\r\n                    \"#D9D5D8\",\r\n                    \"#D9D5D8\",\r\n                    \"#D9D5D8\",\r\n                    \"#D9D5D8\",\r\n                    \"#D9D5D8\",\r\n                    \"#D9D5D8\",\r\n                    \"#D9D5D8\",\r\n                    \"#D9D5D8\",\r\n                    \"#94B99A\",\r\n                ]\r\n\r\n            }, \r\n\r\n\r\n\r\n        \r\n        ]\r\n\r\n    }\r\n\r\n    return (\r\n       <Line  \r\n       data = {data}\r\n       \r\n       />\r\n    )\r\n}\r\n\r\nexport default LineChart;","import React from 'react'\r\nimport BarChart from './BarChart'\r\nimport  LineChart from './LineChart'\r\n// import {useContext} from 'react';\r\n// import { Bar } from 'react-chartjs-2';\r\n\r\nfunction keyValueSwap(object){\r\n    let swapedKeyValue = {}\r\n    const keys = Object.keys(object);\r\n    const values = Object.values(object)\r\n    values.forEach((item, index)=>{\r\n        swapedKeyValue[item] = keys[index]\r\n    })\r\n    return swapedKeyValue\r\n} // Could be placed in the parent component\r\n\r\nfunction displayEditing(value, indicator){\r\n    switch(indicator){\r\n        case \"NY.GDP.MKTP.CD\":\r\n            return (Math.round(value/Math.pow(10, 9))+\" billion dollars\")\r\n        case \"NY.GDP.PCAP.CD\":\r\n            return (Math.round(value, 3) + \" dollars\")\r\n        case \"NY.GDP.PCAP.PP.CD\":\r\n            return (Math.round(value, 3) + \" dollars\")\r\n        case \"NY.GNP.PCAP.PP.CD\":\r\n            return (Math.round(value, 3) + \" dollars\")\r\n        case \"FP.CPI.TOTL.ZG\":\r\n            return (value.toFixed(2)+ \"% (percent)\")\r\n        case \"NE.IMP.GNFS.CD\":\r\n            return (Math.round(value/Math.pow(10, 9))+\" billion dollars\")\r\n        case \"NE.EXP.GNFS.CD\":\r\n            return (Math.round(value/Math.pow(10, 9))+\" billion dollars\")\r\n        case \"SP.DYN.LE00.IN\":\r\n            return(Math.round(value)+ \" years\")\r\n        case \"EN.ATM.CO2E.KT\":\r\n            return (Math.round(value)+\" kT (killo Tonnes)\")\r\n        default:\r\n            return (Math.round(value))\r\n    }\r\n}\r\n\r\n// filter handler \r\nfunction filterQuery(state, indicators){\r\n        const keys = Object.keys(state)\r\n        let filteredObject = {}\r\n        keys.forEach((item, index)=>{\r\n            if(indicators.includes(item))  filteredObject[item] = state[item]\r\n        })\r\n        return filteredObject\r\n    }\r\n\r\nconst OneCountryResults = (props)=>{\r\n\r\n    const MACRO_INDICATORS  = [\"NY.GDP.MKTP.CD\", \"NY.GDP.PCAP.CD\", \"NY.GDP.PCAP.PP.CD\", \"NY.GNP.PCAP.PP.CD\", \"FP.CPI.TOTL.ZG\"];\r\n    const TRADE_INDICATORS = [\"NE.IMP.GNFS.CD\", \"NE.EXP.GNFS.CD\"];\r\n    const SOCIAL_INDICATORS  = [\"SP.DYN.LE00.IN\", \"EN.ATM.CO2E.KT\", ];\r\n\r\n\r\n\r\n    // Query State & world State\r\n    const queryState = props.queryState;\r\n    const worldQueryState = props.worldQueryState;\r\n    const indicatorNames = keyValueSwap(props.indicatorNames);\r\n\r\n\r\n    // Keys of query state\r\n    // const queryStateKeys = Object.keys(queryState)\r\n\r\n\r\n    // Filtered States\r\n    const macroState = filterQuery(queryState, MACRO_INDICATORS)\r\n    const tradeState = filterQuery(queryState, TRADE_INDICATORS)\r\n    const socialState = filterQuery(queryState, SOCIAL_INDICATORS)\r\n\r\n    // Visualization \r\n    const MACRO_VIZ = [\"NY.GDP.PCAP.CD\", \"NY.GDP.PCAP.PP.CD\", \"NY.GNP.PCAP.PP.CD\"]\r\n    const TRADE_VIZ = [\"NE.IMP.GNFS.CD\", \"NE.EXP.GNFS.CD\"];\r\n    const SOCIAL_VIZ = [\"SP.DYN.LE00.IN\"]\r\n    const LINE_VIZ = [\"gdp_series, gdp_prediction\"]\r\n    // Visualization States\r\n    const macroVisualizationData = filterQuery(queryState, MACRO_VIZ)\r\n    const tradeVisualizationData = filterQuery(queryState, TRADE_VIZ)\r\n    const socialVisualizationData = filterQuery(queryState, SOCIAL_VIZ)\r\n    \r\n    const worldMacroVisualizationData = filterQuery(worldQueryState, MACRO_VIZ)\r\n    const worldTradeVisualizationData = filterQuery(worldQueryState, TRADE_VIZ)\r\n    const worldSocialVisualizationData = filterQuery(worldQueryState, SOCIAL_VIZ)\r\n\r\n    const lineChartVisualizationData = {\r\n        \"gdp_series\":queryState[\"gdp_series\"], \r\n        \"gdp_prediction\":queryState[\"gdp_prediction\"]\r\n    }\r\n    console.log(queryState)\r\n\r\n    return (\r\n        <div className=\"one-country-results container\">\r\n\r\n            <section className=\"macro\">\r\n                <div className=\"one-country-result-text\">\r\n                    <h3>Macro</h3>\r\n                    {Object.keys(macroState).map((item, index)=>{\r\n                        if(macroState[item])\r\n                        return (\r\n                            <div className=\"one-country-result\">\r\n                                <p>{indicatorNames[item]}:<span>{displayEditing(macroState[item], item)}</span></p>\r\n                    \r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n\r\n                <BarChart \r\n                state = {macroVisualizationData}\r\n                indicatorNames = {indicatorNames}\r\n                worldState = {worldMacroVisualizationData}\r\n                type= \"macro\"\r\n                world={true}\r\n                countryName = {props.countryName}\r\n                // settings = {{\r\n                //     backgroundColor:\"#E7C864\"\r\n\r\n                // }}\r\n                />\r\n            </section>\r\n\r\n            <section className=\"trade\">\r\n                <div className=\"one-country-result-text\">\r\n                    <h3>Trade</h3>\r\n                    {Object.keys(tradeState).map((item, index)=>{\r\n                        return (\r\n                            <div className=\"one-country-result\">\r\n                                <p>{indicatorNames[item]}:<span>{displayEditing(tradeState[item], item)}</span></p>\r\n                    \r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n\r\n                <BarChart \r\n                state = {tradeVisualizationData}\r\n                indicatorNames = {indicatorNames}\r\n                worldState = {worldTradeVisualizationData}\r\n                type= \"trade\"\r\n                world={true}\r\n                countryName = {props.countryName}\r\n                />\r\n            </section>\r\n\r\n            <section className=\"social\">\r\n                <div className=\"one-country-result-text\">\r\n                    <h3>Social</h3>\r\n                    {Object.keys(socialState).map((item, index)=>{\r\n                        return (\r\n                            <div className=\"one-country-result\">\r\n                                <p>{indicatorNames[item]}:<span>{displayEditing(socialState[item], item)}</span></p>\r\n                    \r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n                <BarChart \r\n                state = {socialVisualizationData}\r\n                indicatorNames = {indicatorNames}\r\n                type= \"social\"\r\n                worldState = {worldSocialVisualizationData}\r\n                world={true}\r\n                countryName = {props.countryName}\r\n                />\r\n            </section>\r\n\r\n            {/* <section className=\"world\">\r\n                <h3>World</h3>\r\n                {Object.keys(worldQueryState).map((item, index)=>{\r\n                    return (\r\n                        <div className=\"one-country-result\">\r\n                            <p>{indicatorNames[item]}:<span>{displayEditing(worldQueryState[item])}</span></p>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </section> */}\r\n\r\n            <section>\r\n                <LineChart\r\n                state = {lineChartVisualizationData}\r\n                countryName = {props.countryName}\r\n                />\r\n            </section>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OneCountryResults;","\r\n// const fetch = require('node-fetch');\r\n// const fs = require('fs');\r\nlet ERROR_COUNTER = 0;\r\n\r\n\r\n// Utility Funcitons\r\nexport function indexOfMax(arr) {\r\nif (arr.length === 0) {\r\n    return -1;\r\n}\r\n\r\nlet max = arr[0];\r\nlet maxIndex = 0;\r\n\r\nfor (let i = 1; i < arr.length; i++) {\r\n    if (arr[i] > max) {\r\n        maxIndex = i;\r\n        max = arr[i];\r\n    }\r\n}\r\n\r\nreturn maxIndex;\r\n}\r\n\r\nexport function indexOfMin(arr) {\r\nif (arr.length === 0) {\r\n    return -1;\r\n}\r\n\r\nlet min = arr[0];\r\nlet minIndex = 0;\r\n\r\nfor (let i = 1; i < arr.length; i++) {\r\n    if (arr[i] < min) {\r\n        minIndex = i;\r\n        min = arr[i];\r\n    }\r\n}\r\n\r\nreturn minIndex;\r\n}\r\n\r\nexport function randomNumberGenerator(maxNumber, minNumber = 0){\r\nconst range = maxNumber - minNumber + 1;\r\nconst randomNumber = Math.random()*(range) + minNumber;\r\nreturn Math.floor(randomNumber)\r\n}\r\n\r\nexport function returnArrayOfIndicators(array){\r\nconst length = array.length;\r\nlet endIndex = 0;\r\nlet reqArrays = [];\r\nfor(let i=0; i<length; i+=3){\r\n    let reqArray;\r\n    if(!(i+3 > length)){\r\n        endIndex = i+3;\r\n        reqArray = array.slice(i, endIndex);\r\n    } else {\r\n        reqArray = array.slice(i)\r\n    }\r\n\r\n    reqArrays.push(reqArray);\r\n}\r\n\r\nreturn reqArrays\r\n\r\n}\r\n\r\nexport function createRangeOfRadomNumbers(quantity, max, min = 0){\r\nlet numbersArray = [];\r\nwhile(numbersArray.length < quantity){\r\n    const candidateNumber = randomNumberGenerator(max, min);\r\n    if(numbersArray.indexOf(candidateNumber) === -1) numbersArray.push(candidateNumber)\r\n    \r\n}\r\nreturn numbersArray\r\n}\r\n\r\n\r\n// Filter export function \r\nexport function filterAPIResponse(dataObject){\r\n/* This export function filters null values and region Names in \r\nthe API response. \r\n------------------------------------\r\nReturns:\r\n=> An Array of Objects (identical to the input) \r\n*/\r\nconst COUNTRIES_IDS = [\"AFG\",\"ALB\",\"DZA\",\"ASM\",\"AND\",\"AGO\",\"ATG\",\"ARG\",\"ARM\",\"ABW\",\"AUS\",\"AUT\",\"AZE\",\"BHS\",\"BHR\",\"BGD\",\"BRB\",\"BLR\",\"BEL\",\"BLZ\",\"BEN\",\"BMU\",\"BTN\",\"BOL\",\"BIH\",\"BWA\",\"BRA\",\"VGB\",\"BRN\",\"BGR\",\"BFA\",\"BDI\",\"CPV\",\"KHM\",\"CMR\",\"CAN\",\"CYM\",\"CAF\",\"TCD\",\"CHI\",\"CHL\",\"CHN\",\"COL\",\"COM\",\"COD\",\"COG\",\"CRI\",\"CIV\",\"HRV\",\"CUB\",\"CUW\",\"CYP\",\"CZE\",\"DNK\",\"DJI\",\"DMA\",\"DOM\",\"ECU\",\"EGY\",\"SLV\",\"GNQ\",\"ERI\",\"EST\",\"SWZ\",\"ETH\",\"FRO\",\"FJI\",\"FIN\",\"FRA\",\"PYF\",\"GAB\",\"GMB\",\"GEO\",\"DEU\",\"GHA\",\"GIB\",\"GRC\",\"GRL\",\"GRD\",\"GUM\",\"GTM\",\"GIN\",\"GNB\",\"GUY\",\"HTI\",\"HND\",\"HKG\",\"HUN\",\"ISL\",\"IND\",\"IDN\",\"IRN\",\"IRQ\",\"IRL\",\"IMN\",\"ISR\",\"ITA\",\"JAM\",\"JPN\",\"JOR\",\"KAZ\",\"KEN\",\"KIR\",\"PRK\",\"KOR\",\"XKX\",\"KWT\",\"KGZ\",\"LAO\",\"LVA\",\"LBN\",\"LSO\",\"LBR\",\"LBY\",\"LIE\",\"LTU\",\"LUX\",\"MAC\",\"MDG\",\"MWI\",\"MYS\",\"MDV\",\"MLI\",\"MLT\",\"MHL\",\"MRT\",\"MUS\",\"MEX\",\"FSM\",\"MDA\",\"MCO\",\"MNG\",\"MNE\",\"MAR\",\"MOZ\",\"MMR\",\"NAM\",\"NRU\",\"NPL\",\"NLD\",\"NCL\",\"NZL\",\"NIC\",\"NER\",\"NGA\",\"MKD\",\"MNP\",\"NOR\",\"OMN\",\"PAK\",\"PLW\",\"PAN\",\"PNG\",\"PRY\",\"PER\",\"PHL\",\"POL\",\"PRT\",\"PRI\",\"QAT\",\"ROU\",\"RUS\",\"RWA\",\"WSM\",\"SMR\",\"STP\",\"SAU\",\"SEN\",\"SRB\",\"SYC\",\"SLE\",\"SGP\",\"SXM\",\"SVK\",\"SVN\",\"SLB\",\"SOM\",\"ZAF\",\"SSD\",\"ESP\",\"LKA\",\"KNA\",\"LCA\",\"MAF\",\"VCT\",\"SDN\",\"SUR\",\"SWE\",\"CHE\",\"SYR\",\"TJK\",\"TZA\",\"THA\",\"TLS\",\"TGO\",\"TON\",\"TTO\",\"TUN\",\"TUR\",\"TKM\",\"TCA\",\"TUV\",\"UGA\",\"UKR\",\"ARE\",\"GBR\",\"USA\",\"URY\",\"UZB\",\"VUT\",\"VEN\",\"VNM\",\"VIR\",\"PSE\",\"YEM\",\"ZMB\",\"ZWE\"];\r\n\r\n// Filter Null objects\r\nconst dataObjectNullFiltered = dataObject.filter(item => item.value)\r\n\r\n// Filter Regions (as only COUNTRIES are Required)\r\nconst dataObjectCountryOnlyFiltered = dataObjectNullFiltered.filter(item => COUNTRIES_IDS.includes(item.countryiso3code))\r\nreturn dataObjectCountryOnlyFiltered\r\n}\r\n\r\nexport function filterRegionAPIResponse(dataObject){\r\n// Filter Null objects\r\nconst dataObjectNullFiltered = dataObject.filter(item => item.value)\r\nreturn dataObjectNullFiltered\r\n}\r\n\r\n// Data Extraction \r\n\r\nexport function valuesIdsExtraction(dataObject){\r\nlet values = [];\r\nlet ids = [];\r\ndataObject.forEach(item=>{\r\n    values.push(item.value);\r\n    ids.push(item.countryiso3code);\r\n})\r\nreturn {\r\n    values: values,\r\n    ids:ids\r\n}\r\n}\r\n\r\nexport function dataExtraction(dataObject, indicatorsList = []){\r\n/*This export function extracts the required form of data\r\n-------------------------------------\r\nReturns \r\nif NO INDICATOR specified => returns { values, ids} (of all items combined)\r\nif INDICATORs specified => returns {allValues:[[valuesOfIndicator1], [ValuesOfIndicator2], ....], allIds:[[..same as before]] }\r\n*/\r\nif (indicatorsList.length == 0) {\r\n    const {values, ids} = valuesIdsExtraction(dataObject);\r\n    return { \r\n        values: values, \r\n        ids:ids\r\n    }\r\n} else {\r\n    const allValues = [];\r\n    const allIds = [];\r\n    for(let i=0; i<indicatorsList.length; i++){\r\n        let specificIndicatorFilteredList = dataObject.filter(item => item.indicator.id == indicatorsList[i]);\r\n        let { values, ids} = valuesIdsExtraction(specificIndicatorFilteredList);\r\n        allValues.push(values);\r\n        allIds.push(ids)\r\n    }   \r\n    return {\r\n        allValues:allValues,\r\n        allIds:allIds\r\n    }\r\n}\r\n\r\n\r\n}\r\n\r\n// Country Part\r\n\r\nexport function createCountryQuery(countriesList){\r\nconst COUNTRY_ROUTE = \"country/\";\r\nconst countries_list_length = countriesList.length;\r\nlet countriesQuery = \"\";\r\n\r\nif(countries_list_length == 0) {\r\n    countriesQuery += \"all\";\r\n\r\n} else {\r\n    countriesList.forEach((item, index)=>{\r\n        countriesQuery += item\r\n        if(countries_list_length > 1 && index != countries_list_length-1 ) countriesQuery += \";\"\r\n    \r\n    })\r\n}\r\n\r\nconst completeQuery = COUNTRY_ROUTE + countriesQuery + \"/\"\r\nreturn completeQuery\r\n}\r\n\r\n// Indicators part\r\nexport function createIndicatorQuery(indicatorsList) {\r\nconst INDICATOR_ROUTE = \"indicator/\";\r\nconst indicators_list_length = indicatorsList.length;\r\nlet indicatorsQuery = \"\";\r\n    \r\nif(indicators_list_length == 0) {\r\n    indicatorsQuery += \"GIVE_INDICATOR_TO_AVOID_OVERFLOW\";\r\n    \r\n} else {\r\n    indicatorsList.forEach((item, index)=>{\r\n        indicatorsQuery += item\r\n        if(indicators_list_length > 1 && index != indicators_list_length-1 ) indicatorsQuery += \";\"\r\n        \r\n    })\r\n}\r\n\r\nconst source = indicators_list_length >1? `source=2&` : ``;\r\n    \r\nconst completeQuery = INDICATOR_ROUTE + indicatorsQuery + \"?\" + source;\r\n\r\nreturn completeQuery\r\n\r\n\r\n}\r\n\r\n// Date part\r\nexport function createDateQuery(dateList){\r\nconst DATE_ROUTE = \"date=\";\r\nconst date_list_length = dateList.length;\r\nlet dateQuery = \"\";\r\n        \r\nif(date_list_length == 0) {\r\n    dateQuery += \"GIVE_A_DATE_RANGE\";\r\n        \r\n} else {\r\n\r\n    if(date_list_length >2) {\r\n        dateQuery += \"TOO_MANY_DATE_VALUES\";\r\n    } else {\r\n        dateList.forEach((item, index)=>{\r\n            dateQuery += item\r\n            if(date_list_length > 1 && index != date_list_length-1 ) dateQuery += \":\"\r\n            \r\n        })\r\n    }\r\n\r\n    \r\n\r\n}\r\nconst completeQuery = DATE_ROUTE + dateQuery;\r\nreturn completeQuery\r\n\r\n}\r\n\r\n// Complete Query\r\nexport function createCompleteQuery(countriesList, indicatorsList, dateList){\r\nconst default_URL = \"https://api.worldbank.org/v2/\";\r\nlet completeQuery = default_URL + createCountryQuery(countriesList) + createIndicatorQuery(indicatorsList) +\"format=json&\"+ createDateQuery(dateList);\r\nreturn completeQuery\r\n}\r\n\r\n\r\n// Data Aggregator\r\nexport function errorCodeCheck(id){\r\nconsole.log()\r\nconsole.log(\"Error Code Check\")\r\nswitch(id){\r\n    case 120:\r\n        console.log('The provided parameter value is not valid.');\r\n        break\r\n    case 503:\r\n        console.log('Service currently not available');\r\n        break\r\n    case 199:\r\n        console.log('Unexpected Error');\r\n        break\r\n}\r\nconsole.log(\"------------------------------------------------\")\r\n}\r\n\r\nexport function metaDataObjectPrccessor(dataObject){\r\nconst responseMetaData = dataObject[0];\r\nconst isValid = !responseMetaData.message;\r\nreturn {\r\n    isValid:isValid, \r\n    responseMetaData:responseMetaData,\r\n    dataObject:dataObject\r\n}\r\n}\r\n\r\nexport async function dataLoopAggregator(metaDataObject, url){\r\nlet {isValid, responseMetaData, dataObject} = metaDataObject;\r\nconsole.log(\"Is the query Valid:\", isValid)\r\nif(isValid){\r\n    const n_pages = responseMetaData.pages;\r\n    const per_page = responseMetaData.per_page;\r\n\r\n    \r\n    let aggregateData = [... dataObject[1]]; // Adding the first page to the array\r\n    console.log(\"Starting Length:\", aggregateData.length)\r\n    // Data Loop\r\n    let results = dataLoop(n_pages, url, aggregateData)\r\n\r\n    // return aggregateData\r\n    return results\r\n} else {\r\n    let id = responseMetaData.message[0].id;\r\n    id = parseInt(id);\r\n    return errorCodeCheck(id)\r\n    \r\n}   \r\n}\r\n\r\n\r\nexport async function dataLoop(n_pages, URL, firstValues){\r\nlet aggregateData = [...firstValues];\r\nconst startPage = 2;\r\nlet pageNumber=startPage;\r\ndo{\r\n    let pageAttribute = `&page=${pageNumber}`;\r\n    let pageURL = URL+pageAttribute;\r\n    let pageData;\r\n\r\n    const response = await fetch(pageURL)\r\n    pageData = await response.json();\r\n    aggregateData = aggregateData.concat(pageData[1]);\r\n    pageNumber++;\r\n}  while (pageNumber<=n_pages)\r\n\r\n\r\nreturn aggregateData\r\n}\r\n\r\n\r\nexport async function getAggregatedData(url){\r\n\r\n\r\nconst response = await fetch(url);\r\nconst dataObject = await response.json();\r\nconst metaDataObject = metaDataObjectPrccessor(dataObject);\r\nlet results = await dataLoopAggregator(metaDataObject, url)\r\n\r\n\r\nreturn results \r\n\r\n}\r\n\r\n// Popular Section API Call\r\n\r\n// One Country Section => Working Well\r\nexport function oneCountrySection(countries_list){\r\n\r\n// Controls \r\nconst indicators_list = [\"FP.CPI.TOTL.ZG\", \"NY.GDP.MKTP.CD\", \"NY.GDP.PCAP.CD\", \"NY.GDP.PCAP.PP.CD\", \"NY.GNP.PCAP.PP.CD\", \"SP.DYN.LE00.IN\",  \"NE.IMP.GNFS.CD\", \"NE.EXP.GNFS.CD\"];\r\nconst indicator_names_list = [\"Inflation\", \"GDP\", \"GDP per Capita\", \"GDP per capita PPP\", \"GNI per capita PPP\", \"life expectancy\",  \"imports\", \"exports\"]\r\nconst date_list = [2019];\r\n\r\nconst apiQuery = createCompleteQuery(countries_list, indicators_list, date_list);\r\nconst countrySectionResults = getAggregatedData(apiQuery)\r\n.then(results =>{\r\n    const filteredResults = filterRegionAPIResponse(results);\r\n    const {allValues, allIds} = dataExtraction(filteredResults, indicators_list);\r\n    allValues.forEach((item, index)=>{\r\n        console.log(indicator_names_list[index]);\r\n        console.log(\"Length:\", allIds[index].length);\r\n        console.log(\"Value:\", item)\r\n        console.log(\"\\n\")\r\n    })\r\n\r\n    \r\n})\r\n\r\nconst co2Query = createCompleteQuery(countries_list, [\"EN.ATM.CO2E.KT\"], [2016]);\r\nconst countryCO2Aggregator = getAggregatedData(co2Query)\r\n.then(co2_results => {\r\n    const filteredCO2 = filterRegionAPIResponse(co2_results);\r\n    const {values, ids} = dataExtraction(filteredCO2);\r\n    console.log(\"\\n\")\r\n    console.log(\"CO2 Emissions\")\r\n    console.log(\"Length:\", values.length);\r\n    console.log(\"Length:\", values)\r\n    console.log(\"\\n\")\r\n\r\n\r\n})\r\n\r\n\r\n}\r\n// oneCountrySection([\"BRA\"])\r\n\r\n\r\n// World at a Glance =>\r\nexport function worldAtAGlanceSection(){\r\n\r\nconst regions_countries_list = [\"ARB\", \"EAS\", \"ECS\", \"LCN\", \"MEA\", \"NAC\", \"PSS\", \"SAS\", \"SSF\"];\r\nconst regions_indicators_list = [\"NY.GDP.MKTP.KD.ZG\", \"IQ.CPA.GNDR.XQ\", \"SP.POP.TOTL\"];\r\nconst region_indicator_names_list = [\"Economic Growth\", \"Gender Parity INdex\", \"Total Population\"]\r\nconst date_list = [2019];\r\n\r\nconst regions_api_query  = createCompleteQuery(regions_countries_list, regions_indicators_list, date_list)\r\nconst regions_data_results = getAggregatedData(regions_api_query)\r\n.then((results)=>{\r\nconst filteredResults = filterRegionAPIResponse(results);\r\nconst {allValues, allIds} = dataExtraction(filteredResults, regions_indicators_list);\r\nallValues.forEach((item, index)=>{\r\n    console.log(region_indicator_names_list[index]);\r\n    console.log(\"Length:\", allIds[index].length);\r\n    console.log(\"Value:\", item)\r\n    console.log(\"\\n\")\r\n})\r\n\r\nconst regions_literacy_api_query  = createCompleteQuery(regions_countries_list, [\"SE.ADT.LITR.ZS\"], [2016])\r\nconst regions_literacy_data_results = getAggregatedData(regions_literacy_api_query)\r\n.then(results=>{\r\n    const filteredLiteracyResults = filterRegionAPIResponse(results);\r\n    const {values, ids} = dataExtraction(filteredLiteracyResults);\r\n    console.log(\"\\n\")\r\n    console.log(\"Literacy Rate\")\r\n    console.log(\"Length:\", values.length);\r\n    console.log(\"Length:\", values)\r\n    console.log(\"\\n\")\r\n    console.log(ids)\r\n})\r\n})\r\n}\r\n//  worldAtAGlanceSection();\r\n\r\n\r\n// Popular Section \r\n\r\nexport function requestAndAggregateResults(countries, indicators, date_list=[2019]){\r\nconst query = createCompleteQuery(countries, indicators, date_list);\r\n\r\nconst section_results = getAggregatedData(query)\r\n.then(results => {\r\n    const filteredResults = filterRegionAPIResponse(results);\r\n        const {values, ids} = dataExtraction(filteredResults);\r\n        console.log(\"\\n\")\r\n        console.log(\"***************************************\")\r\n        console.log(values.length)\r\n})\r\n.catch(err=>{\r\n    ERROR_COUNTER += 1;\r\n    console.log(ERROR_COUNTER);\r\n    if(ERROR_COUNTER < 5)  requestAndAggregateResults(countries, indicators, date_list)\r\n    else return 0;\r\n    \r\n})\r\n}\r\nexport function popularSection(){\r\nconst POPULAR_SECTION_COUNTRIES = [\"AFG\", \"ALB\", \"DZA\", \"ASM\", \"AND\", \"AGO\", \"ATG\", \"ARG\", \"ARM\", \"ABW\", \"AUS\", \"AUT\", \"AZE\", \"BHS\", \"BHR\", \"BGD\", \"BRB\", \"BLR\", \"BEL\", \"BLZ\", \"BEN\", \"BMU\", \"BTN\", \"BOL\", \"BIH\", \"BWA\", \"BRA\", \"VGB\", \"BRN\", \"BGR\", \"BFA\", \"BDI\", \"CPV\", \"KHM\", \"CMR\", \"CAN\", \"CYM\", \"CAF\", \"TCD\", \"CHI\", \"CHL\", \"CHN\", \"COL\", \"COM\", \"COD\", \"COG\", \"CRI\", \"CIV\", \"HRV\", \"CUB\", \"CUW\", \"CYP\", \"CZE\", \"DNK\", \"DJI\", \"DMA\", \"DOM\", \"ECU\", \"EGY\", \"SLV\", \"GNQ\", \"ERI\", \"EST\", \"SWZ\", \"ETH\", \"FRO\", \"FJI\", \"FIN\", \"FRA\", \"PYF\", \"GAB\", \"GMB\", \"GEO\", \"DEU\", \"GHA\", \"GIB\", \"GRC\", \"GRL\", \"GRD\", \"GUM\", \"GTM\", \"GIN\", \"GNB\", \"GUY\", \"HTI\", \"HND\", \"HKG\", \"HUN\", \"ISL\", \"IND\", \"IDN\", \"IRN\", \"IRQ\", \"IRL\", \"IMN\", \"ISR\", \"ITA\", \"JAM\", \"JPN\", \"JOR\", \"KAZ\", \"KEN\", \"KIR\", \"PRK\", \"KOR\", \"XKX\", \"KWT\", \"KGZ\", \"LAO\", \"LVA\", \"LBN\", \"LSO\", \"LBR\", \"LBY\", \"LIE\", \"LTU\", \"LUX\", \"MAC\", \"MDG\", \"MWI\", \"MYS\", \"MDV\", \"MLI\", \"MLT\", \"MHL\", \"MRT\", \"MUS\", \"MEX\", \"FSM\", \"MDA\", \"MCO\", \"MNG\", \"MNE\", \"MAR\", \"MOZ\", \"MMR\", \"NAM\", \"NRU\", \"NPL\", \"NLD\", \"NCL\", \"NZL\", \"NIC\", \"NER\", \"NGA\", \"MKD\", \"MNP\", \"NOR\", \"OMN\", \"PAK\", \"PLW\", \"PAN\", \"PNG\", \"PRY\", \"PER\", \"PHL\", \"POL\", \"PRT\", \"PRI\", \"QAT\", \"ROU\", \"RUS\", \"RWA\", \"WSM\", \"SMR\", \"STP\", \"SAU\", \"SEN\", \"SRB\", \"SYC\", \"SLE\", \"SGP\", \"SXM\", \"SVK\", \"SVN\", \"SLB\", \"SOM\", \"ZAF\", \"SSD\", \"ESP\", \"LKA\", \"KNA\", \"LCA\", \"MAF\", \"VCT\", \"SDN\", \"SUR\", \"SWE\", \"CHE\", \"SYR\", \"TJK\", \"TZA\", \"THA\", \"TLS\", \"TGO\", \"TON\", \"TTO\", \"TUN\", \"TUR\", \"TKM\", \"TCA\", \"TUV\", \"UGA\", \"UKR\", \"ARE\", \"GBR\", \"USA\", \"URY\", \"UZB\", \"VUT\", \"VEN\", \"VNM\", \"VIR\", \"PSE\", \"YEM\", \"ZMB\", \"ZWE\"];\r\nconst POPULAR_SECTION_INDICATORS=[\"FP.CPI.TOTL.ZG\", \"NY.GDP.PCAP.CD\",  \"NY.GDP.PCAP.PP.CD\", \"NY.GNP.MKTP.CD\", \"NY.GNP.PCAP.PP.CD\",  \"SP.POP.TOTL\", \"SP.DYN.LE00.IN\"]\r\n\r\nconst INDICATOR_NAMES=[\"Inflation\"\r\n    , \"GDP per capita\"\r\n    , \"GDP per capita PPP\" \r\n    , \"GNI\" \r\n    , \"GNI per capita, 2010 constant prices\"\r\n    , \"Population\" \r\n    , \"Life expectance\" \r\n];\r\nconst DATE_LIST=[2019];\r\n\r\nconst randomIndices = createRangeOfRadomNumbers(3, POPULAR_SECTION_INDICATORS.length -1);\r\nlet truncated_POPULAR_SECTION_INDICATORS = [];\r\nlet truncated_INDICATOR_NAMES = [];\r\nrandomIndices.forEach(randomNumber=>{\r\n    const indicator =  POPULAR_SECTION_INDICATORS[randomNumber];\r\n    const indicator_name = INDICATOR_NAMES[randomNumber]\r\n    truncated_POPULAR_SECTION_INDICATORS.push(indicator);\r\n    truncated_INDICATOR_NAMES.push(indicator_name)\r\n\r\n})\r\ntruncated_POPULAR_SECTION_INDICATORS.forEach((item, index)=>{\r\n    console.log(truncated_INDICATOR_NAMES[index])\r\n    requestAndAggregateResults(POPULAR_SECTION_COUNTRIES, [item], DATE_LIST);\r\n    \r\n    \r\n})\r\n\r\n}\r\n// popularSection()\r\n\r\n// Unpopular Section \r\n\r\nexport function unpopularSection(){\r\nconst UNPOPULAR_SECTION_COUNTRIES = [\"AFG\", \"ALB\", \"DZA\", \"ASM\", \"AND\", \"AGO\", \"ATG\", \"ARG\", \"ARM\", \"ABW\", \"AUS\", \"AUT\", \"AZE\", \"BHS\", \"BHR\", \"BGD\", \"BRB\", \"BLR\", \"BEL\", \"BLZ\", \"BEN\", \"BMU\", \"BTN\", \"BOL\", \"BIH\", \"BWA\", \"BRA\", \"VGB\", \"BRN\", \"BGR\", \"BFA\", \"BDI\", \"CPV\", \"KHM\", \"CMR\", \"CAN\", \"CYM\", \"CAF\", \"TCD\", \"CHI\", \"CHL\", \"CHN\", \"COL\", \"COM\", \"COD\", \"COG\", \"CRI\", \"CIV\", \"HRV\", \"CUB\", \"CUW\", \"CYP\", \"CZE\", \"DNK\", \"DJI\", \"DMA\", \"DOM\", \"ECU\", \"EGY\", \"SLV\", \"GNQ\", \"ERI\", \"EST\", \"SWZ\", \"ETH\", \"FRO\", \"FJI\", \"FIN\", \"FRA\", \"PYF\", \"GAB\", \"GMB\", \"GEO\", \"DEU\", \"GHA\", \"GIB\", \"GRC\", \"GRL\", \"GRD\", \"GUM\", \"GTM\", \"GIN\", \"GNB\", \"GUY\", \"HTI\", \"HND\", \"HKG\", \"HUN\", \"ISL\", \"IND\", \"IDN\", \"IRN\", \"IRQ\", \"IRL\", \"IMN\", \"ISR\", \"ITA\", \"JAM\", \"JPN\", \"JOR\", \"KAZ\", \"KEN\", \"KIR\", \"PRK\", \"KOR\", \"XKX\", \"KWT\", \"KGZ\", \"LAO\", \"LVA\", \"LBN\", \"LSO\", \"LBR\", \"LBY\", \"LIE\", \"LTU\", \"LUX\", \"MAC\", \"MDG\", \"MWI\", \"MYS\", \"MDV\", \"MLI\", \"MLT\", \"MHL\", \"MRT\", \"MUS\", \"MEX\", \"FSM\", \"MDA\", \"MCO\", \"MNG\", \"MNE\", \"MAR\", \"MOZ\", \"MMR\", \"NAM\", \"NRU\", \"NPL\", \"NLD\", \"NCL\", \"NZL\", \"NIC\", \"NER\", \"NGA\", \"MKD\", \"MNP\", \"NOR\", \"OMN\", \"PAK\", \"PLW\", \"PAN\", \"PNG\", \"PRY\", \"PER\", \"PHL\", \"POL\", \"PRT\", \"PRI\", \"QAT\", \"ROU\", \"RUS\", \"RWA\", \"WSM\", \"SMR\", \"STP\", \"SAU\", \"SEN\", \"SRB\", \"SYC\", \"SLE\", \"SGP\", \"SXM\", \"SVK\", \"SVN\", \"SLB\", \"SOM\", \"ZAF\", \"SSD\", \"ESP\", \"LKA\", \"KNA\", \"LCA\", \"MAF\", \"VCT\", \"SDN\", \"SUR\", \"SWE\", \"CHE\", \"SYR\", \"TJK\", \"TZA\", \"THA\", \"TLS\", \"TGO\", \"TON\", \"TTO\", \"TUN\", \"TUR\", \"TKM\", \"TCA\", \"TUV\", \"UGA\", \"UKR\", \"ARE\", \"GBR\", \"USA\", \"URY\", \"UZB\", \"VUT\", \"VEN\", \"VNM\", \"VIR\", \"PSE\", \"YEM\", \"ZMB\", \"ZWE\"];\r\nconst UNPOPULAR_SECTION_INDICATORS= [\"ST.INT.ARVL\", \"SH.STA.DIAB.ZS\", \"SP.URB.TOTL.IN.ZS\", \"ST.INT.ARVL\" ]; //Removed => \"SP.URB.TOTL.IN.ZS\", \"ST.INT.ARVL\", \"SH.ALC.PCAP.LI\"\r\nconst INDICATOR_NAMES = [ \"International Tourism\",\"Diabetes\", \"Urban Population\", \"International Tourism\"] //\"Urban Population\", \"International Tourism\", \"Alcohol Consumption\",\r\nconst DATE_LIST = [2019] \r\n\r\nUNPOPULAR_SECTION_INDICATORS.forEach((item, index)=>{\r\n    requestAndAggregateResults(UNPOPULAR_SECTION_COUNTRIES, [item], DATE_LIST)\r\n})\r\n\r\n}\r\n// unpopularSection()\r\n\r\n// Quick Facts \r\nexport function quickFactSection(){\r\nconst QUICK_FACT_COUNTRIES  = [\"AFG\", \"ALB\", \"DZA\", \"ASM\", \"AND\", \"AGO\", \"ATG\", \"ARG\", \"ARM\", \"ABW\", \"AUS\", \"AUT\", \"AZE\", \"BHS\", \"BHR\", \"BGD\", \"BRB\", \"BLR\", \"BEL\", \"BLZ\", \"BEN\", \"BMU\", \"BTN\", \"BOL\", \"BIH\", \"BWA\", \"BRA\", \"VGB\", \"BRN\", \"BGR\", \"BFA\", \"BDI\", \"CPV\", \"KHM\", \"CMR\", \"CAN\", \"CYM\", \"CAF\", \"TCD\", \"CHI\", \"CHL\", \"CHN\", \"COL\", \"COM\", \"COD\", \"COG\", \"CRI\", \"CIV\", \"HRV\", \"CUB\", \"CUW\", \"CYP\", \"CZE\", \"DNK\", \"DJI\", \"DMA\", \"DOM\", \"ECU\", \"EGY\", \"SLV\", \"GNQ\", \"ERI\", \"EST\", \"SWZ\", \"ETH\", \"FRO\", \"FJI\", \"FIN\", \"FRA\", \"PYF\", \"GAB\", \"GMB\", \"GEO\", \"DEU\", \"GHA\", \"GIB\", \"GRC\", \"GRL\", \"GRD\", \"GUM\", \"GTM\", \"GIN\", \"GNB\", \"GUY\", \"HTI\", \"HND\", \"HKG\", \"HUN\", \"ISL\", \"IND\", \"IDN\", \"IRN\", \"IRQ\", \"IRL\", \"IMN\", \"ISR\", \"ITA\", \"JAM\", \"JPN\", \"JOR\", \"KAZ\", \"KEN\", \"KIR\", \"PRK\", \"KOR\", \"XKX\", \"KWT\", \"KGZ\", \"LAO\", \"LVA\", \"LBN\", \"LSO\", \"LBR\", \"LBY\", \"LIE\", \"LTU\", \"LUX\", \"MAC\", \"MDG\", \"MWI\", \"MYS\", \"MDV\", \"MLI\", \"MLT\", \"MHL\", \"MRT\", \"MUS\", \"MEX\", \"FSM\", \"MDA\", \"MCO\", \"MNG\", \"MNE\", \"MAR\", \"MOZ\", \"MMR\", \"NAM\", \"NRU\", \"NPL\", \"NLD\", \"NCL\", \"NZL\", \"NIC\", \"NER\", \"NGA\", \"MKD\", \"MNP\", \"NOR\", \"OMN\", \"PAK\", \"PLW\", \"PAN\", \"PNG\", \"PRY\", \"PER\", \"PHL\", \"POL\", \"PRT\", \"PRI\", \"QAT\", \"ROU\", \"RUS\", \"RWA\", \"WSM\", \"SMR\", \"STP\", \"SAU\", \"SEN\", \"SRB\", \"SYC\", \"SLE\", \"SGP\", \"SXM\", \"SVK\", \"SVN\", \"SLB\", \"SOM\", \"ZAF\", \"SSD\", \"ESP\", \"LKA\", \"KNA\", \"LCA\", \"MAF\", \"VCT\", \"SDN\", \"SUR\", \"SWE\", \"CHE\", \"SYR\", \"TJK\", \"TZA\", \"THA\", \"TLS\", \"TGO\", \"TON\", \"TTO\", \"TUN\", \"TUR\", \"TKM\", \"TCA\", \"TUV\", \"UGA\", \"UKR\", \"ARE\", \"GBR\", \"USA\", \"URY\", \"UZB\", \"VUT\", \"VEN\", \"VNM\", \"VIR\", \"PSE\", \"YEM\", \"ZMB\", \"ZWE\"]\r\nconst QUICK_FACT_GENDER_INDICATORS = [\"IQ.CPA.GNDR.XQ\", \"SL.TLF.TOTL.FE.ZS\", \"SE.ENR.SECO.FM.ZS\"];\r\nconst QUICK_FACT_ECONOMIC_INDICATORS = [\"NY.GDP.MKTP.KD.ZG\", \"FP.CPI.TOTL.ZG\", \"NY.GDP.PCAP.CD\"];\r\nconst QUICK_FACT_SOCIAL_INDICATORS  = [\"SP.POP.TOTL\", \"ST.INT.ARVL\", \"SP.DYN.LE00.IN\"];\r\n\r\nconst QUICK_FACT_GENDER_NAMES = [\"CPIA\", \"Labor Force, female (% of total labor force)\", \"School enrollment\"];\r\nconst QUICK_FACT_ECONOMIC_NAMES = [\"GDP growth\", \"Inflation\", \"GDP per capita\"];\r\nconst QUICK_FACT_SOCIAL_NAMES = [\"Total population\",\"International Tourism\",  \"literacy rate\"]\r\nconst DATE_LIST  = [2019];\r\n\r\nconst INDICATOR_ARRAYS = [\r\n    QUICK_FACT_GENDER_INDICATORS, \r\n    QUICK_FACT_ECONOMIC_INDICATORS, \r\n    QUICK_FACT_SOCIAL_INDICATORS\r\n]\r\n\r\nconst INDICATOR_NAMES = [\r\n    QUICK_FACT_GENDER_NAMES, \r\n    QUICK_FACT_ECONOMIC_NAMES, \r\n    QUICK_FACT_SOCIAL_NAMES\r\n\r\n]\r\n\r\nINDICATOR_ARRAYS.forEach((item, index)=>{\r\n    const randomIndex = randomNumberGenerator(item.length -1);\r\n    const selectedIndicator = item[randomIndex];\r\n    const selectedIndicatorName = INDICATOR_NAMES[index][randomIndex];\r\n    console.log(selectedIndicatorName);\r\n\r\n    requestAndAggregateResults(QUICK_FACT_COUNTRIES, [selectedIndicator], DATE_LIST);\r\n})\r\n\r\n}\r\n\r\n// quickFactSection();\r\n","import React from 'react';\r\nimport {useReducer, useMemo, useEffect, useState} from 'react';\r\nimport axios from 'axios';\r\n\r\n// Importing the preprocessing data\r\nimport PREPROCESSING_DATA from './preprocessing_data/preprocessing_data.json'\r\n\r\n//Import the One Country Results Components\r\nimport OneCountryResults from './OneCountryResults';\r\n\r\n// Import the required Arrays and Objects\r\nimport codeToCountryName from \"./arrays/COUNTRIES_ONLY_CODE_TO_NAME.json\"\r\nimport indicatorNames from \"./arrays/ONE_COUNTRY_INDICATOR_NAMES.json\"\r\n\r\n\r\n// One Country Fetch Function \r\nimport * as queryFunctions from './functions/finalQueries'\r\n\r\n\r\n// Defining the preprocessing constants\r\nconst mean  = PREPROCESSING_DATA[\"mean\"];\r\nconst std = PREPROCESSING_DATA[\"std\"];\r\n\r\n\r\nconst countries = Object.values(codeToCountryName);\r\nconst countriesIds = Object.keys(codeToCountryName);\r\n\r\nconst indicators = Object.keys(indicatorNames);\r\nconst indicatorIds = Object.values(indicatorNames)\r\n\r\n\r\n// ACTIONS\r\nconst ACTIONS = {\r\n    yearChange:\"year\",\r\n    countryChange:\"country\",\r\n    indicatorChange:\"indicator\", \r\n\r\n    co2:\"EN.ATM.CO2E.KT\",\r\n    inflation:\"FP.CPI.TOTL.ZG\", \r\n    gdp:\"NY.GDP.MKTP.CD\", \r\n    gdpPerCapita:\"NY.GDP.PCAP.CD\", \r\n    gdpPerCapitaPPP:\"NY.GDP.PCAP.PP.CD\", \r\n    gniPerCapita:\"NY.GNP.PCAP.PP.CD\", \r\n    lifeExpectancy:\"SP.DYN.LE00.IN\", \r\n    imports:\"NE.IMP.GNFS.CD\", \r\n    exports:\"NE.EXP.GNFS.CD\",\r\n    nan:\"nan\",\r\n\r\n    gdp_series:\"gdp_series\",\r\n    gdp_prediction:\"gdp_prediction\"\r\n    \r\n\r\n\r\n}\r\n\r\n// Reducer\r\nfunction reducer(state, action){\r\n    switch(action.type){\r\n        case ACTIONS.yearChange:\r\n            return yearChangeHandler(state, action)\r\n        case ACTIONS.indicatorChange:\r\n            return indicatorChangeHandler(state, action)\r\n        case ACTIONS.countryChange:\r\n            return countryChangeHandler(state, action)\r\n        default:\r\n            break\r\n        }\r\n}\r\n\r\nfunction queryReducer(state, action){\r\n    switch(action.type){\r\n        case ACTIONS.co2:\r\n            return queryChangeHandler(state, action)\r\n        case ACTIONS.inflation:\r\n            return queryChangeHandler(state, action)\r\n        case ACTIONS.gdp:\r\n            return queryChangeHandler(state, action)\r\n        case ACTIONS.gdpPerCapita:\r\n            return queryChangeHandler(state, action)\r\n        case ACTIONS.gdpPerCapitaPPP:\r\n            return queryChangeHandler(state, action)\r\n        case ACTIONS.gniPerCapita:\r\n            return queryChangeHandler(state, action)\r\n        case ACTIONS.lifeExpectancy:\r\n            return queryChangeHandler(state, action)\r\n        case ACTIONS.imports:\r\n            return queryChangeHandler(state, action)\r\n        case ACTIONS.exports:\r\n            return queryChangeHandler(state, action)\r\n        case ACTIONS.nan:\r\n            return queryNanHandler(state, action)\r\n        case ACTIONS.gdp_series:\r\n            return queryAIHandler(state, action)\r\n        case ACTIONS.gdp_prediction:\r\n            return queryChangeHandler(state, action)\r\n        default: \r\n            return state\r\n    }\r\n}\r\n\r\nfunction worldQueryReducer(state, action){\r\n    switch(action.type){\r\n        case ACTIONS.co2:\r\n            return queryChangeHandler(state, action)\r\n        case ACTIONS.inflation:\r\n            return queryChangeHandler(state, action)\r\n        case ACTIONS.gdp:\r\n            return queryChangeHandler(state, action)\r\n        case ACTIONS.gdpPerCapita:\r\n            return queryChangeHandler(state, action)\r\n        case ACTIONS.gdpPerCapitaPPP:\r\n            return queryChangeHandler(state, action)\r\n        case ACTIONS.gniPerCapita:\r\n            return queryChangeHandler(state, action)\r\n        case ACTIONS.lifeExpectancy:\r\n            return queryChangeHandler(state, action)\r\n        case ACTIONS.imports:\r\n            return queryChangeHandler(state, action)\r\n        case ACTIONS.exports:\r\n            return queryChangeHandler(state, action)\r\n        case ACTIONS.nan:\r\n            return queryNanHandler(state, action)\r\n        default: \r\n            return state\r\n    }  \r\n}\r\n\r\n// Handlers \r\nfunction yearChangeHandler(state, action){\r\n    let newState = {...state, year:action.payload.value}; \r\n    return newState\r\n}\r\n\r\nfunction indicatorChangeHandler(state, action){\r\n    let newState = {...state, indicator:action.payload.value}; \r\n    return newState\r\n}\r\n\r\nfunction countryChangeHandler(state, action){\r\n    let newState = {...state, country:action.payload.value}; \r\n    return newState\r\n}\r\n\r\nfunction queryChangeHandler(state, action){\r\n    let newState = {...state};\r\n    newState[action.type] = action.payload.value\r\n    return newState\r\n}\r\n\r\nfunction queryNanHandler(state, action){\r\n    let newState = {...state}\r\n    newState[action.type] = \"\";\r\n    return newState\r\n}\r\n\r\nfunction queryAIHandler(state, action){\r\n    let newState = {...state};\r\n    newState[action.type] = action.payload.value;\r\n    return newState\r\n}\r\n\r\n// Initial State \r\nconst INITIAL_STATE  = {\r\n    country:\"AFG\",\r\n    indicator:\"FP.CPI.TOTL.ZG\",\r\n    year:\"2019\"\r\n}\r\n\r\nconst QUERY_INITIAL_STATE = {\r\n\r\n    \"EN.ATM.CO2E.KT\":\"\", \r\n    \"FP.CPI.TOTL.ZG\":\"\",\r\n    \"NY.GDP.MKTP.CD\":\"\",\r\n    \"NY.GDP.PCAP.CD\":\"\",\r\n    \"NY.GDP.PCAP.PP.CD\":\"\",\r\n    \"NY.GNP.PCAP.PP.CD\":\"\",\r\n    \"SP.DYN.LE00.IN\":\"\",\r\n    \"NE.IMP.GNFS.CD\":\"\",\r\n    \"NE.EXP.GNFS.CD\":\"\",\r\n\r\n    \"gdp_series\":\"\",\r\n    \"gdp_prediction\":\"\",\r\n\r\n}\r\n\r\nconst WORLD_QUERY_INITIAL_STATE = {\r\n    \"EN.ATM.CO2E.KT\":\"\", \r\n    \"FP.CPI.TOTL.ZG\":\"\",\r\n    \"NY.GDP.MKTP.CD\":\"\",\r\n    \"NY.GDP.PCAP.CD\":\"\",\r\n    \"NY.GDP.PCAP.PP.CD\":\"\",\r\n    \"NY.GNP.PCAP.PP.CD\":\"\",\r\n    \"SP.DYN.LE00.IN\":\"\",\r\n    \"NE.IMP.GNFS.CD\":\"\",\r\n    \"NE.EXP.GNFS.CD\":\"\"\r\n}\r\n\r\n// State\r\n// Could Use Refs to Solve the problem of changing State without\r\n// Clicking Submit\r\n\r\n// AI preprocessing functions\r\n// Functions\r\nasync function makeAIModelRequest(inputs){\r\n    const URL = \"http://localhost:8501/v1/models/gdp_model_building_2:predict\"; \r\n    const input_object = {\r\n        \"instances\":inputs\r\n    }\r\n    \r\n    try {const response = await axios.post(URL, input_object);\r\n    const response_data = await response.data;\r\n    console.log(response_data)\r\n    return response_data\r\n    \r\n    } catch(err){\r\n        console.log(err)\r\n    }\r\n\r\n}\r\n\r\n// Use CORS\r\nasync function makeAIModelRequestFetch(inputs){\r\n    const URL = \"/v1/models/gdp_model_building_2:predict\"; \r\n    const input_object = {\r\n        \"instances\":inputs\r\n    }\r\n    \r\n    const post_object  = {\r\n        method: 'POST', // *GET, POST, PUT, DELETE, etc.\r\n        mode: 'cors', // no-cors, *cors, same-origin\r\n        cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n        //credentials: 'same-origin', // include, *same-origin, omit\r\n        //\"Access-Control-Allow-Origin\":\"*\",\r\n        \r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          // 'Content-Type': 'application/x-www-form-urlencoded',\r\n        },\r\n        redirect: 'follow', // manual, *follow, error\r\n        referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\r\n        body: JSON.stringify(input_object) // body data type must match \"Content-Type\" header\r\n      }\r\n    \r\n    const response =  await fetch(URL, post_object)\r\n                    .then(res=>res.json())\r\n\r\n    return response\r\n}\r\n\r\n\r\nfunction preprocessingAIInput(values){\r\n    // Reverse the values\r\n    const reverse_values = values.reverse();\r\n    // Preprocessing the values\r\n    const preprocessed_values = values.map((values)=>{\r\n        return ((values-mean)/std)\r\n    })\r\n    // Increase a dimension \r\n    const preprocessed_values_in_dims = preprocessed_values.map((input)=>{\r\n        return ([input])\r\n    })\r\n    return [preprocessed_values_in_dims]\r\n}\r\n\r\nfunction preprocessingOutputs(prediction_object){\r\n    const prediction_value = prediction_object[\"predictions\"][0][0];\r\n    return ((prediction_value*std)+mean)\r\n}\r\n\r\n\r\nconst OneCountry = ()=>{\r\n\r\n    const [formState, dispatch] = useReducer(reducer, INITIAL_STATE);\r\n    const [queryState, queryDispatch] = useReducer(queryReducer, QUERY_INITIAL_STATE);\r\n    const [worldQueryState, worldQueryDispatch] = useReducer(worldQueryReducer, WORLD_QUERY_INITIAL_STATE)    \r\n\r\n    useEffect(()=>{console.log(queryState[ACTIONS.gdp])}, [queryState])\r\n\r\n    // Memoizing formState\r\n    // useMemo(()=>{console.log(\"SAme\")}, [formState])\r\n\r\n\r\n\r\n    // country Query Handler \r\n    function oneCountrySection(countries_list, date_list = [2019]){\r\n    \r\n        // Controls \r\n        const indicators_list = [\"FP.CPI.TOTL.ZG\", \"NY.GDP.MKTP.CD\", \"NY.GDP.PCAP.CD\", \"NY.GDP.PCAP.PP.CD\", \"NY.GNP.PCAP.PP.CD\", \"SP.DYN.LE00.IN\",  \"NE.IMP.GNFS.CD\", \"NE.EXP.GNFS.CD\"];\r\n        const indicator_names_list = [\"Inflation\", \"GDP\", \"GDP per Capita\", \"GDP per capita PPP\", \"GNI per capita PPP\", \"life expectancy\",  \"imports\", \"exports\"]\r\n        const world_list = [\"WLD\"]\r\n        // const date_list = [2019];\r\n        \r\n        const apiQuery = queryFunctions.createCompleteQuery(countries_list, indicators_list, date_list);\r\n        const countrySectionResults = queryFunctions.getAggregatedData(apiQuery)\r\n        .then(results =>{\r\n            const filteredResults = queryFunctions.filterRegionAPIResponse(results);\r\n            const {allValues, allIds} = queryFunctions.dataExtraction(filteredResults, indicators_list);\r\n            allValues.forEach((item, index)=>{\r\n                // console.log(indicator_names_list[index]);\r\n                // console.log(\"Length:\", allIds[index].length);\r\n                // console.log(\"Value:\", item)\r\n                // console.log(\"\\n\")\r\n                if(item[0]){\r\n                    console.log(indicator_names_list[index])\r\n                    queryDispatch({type:indicators_list[index], payload:{value:item[0]}})\r\n                } else {\r\n                    queryDispatch({type:ACTIONS.nan})\r\n                }\r\n            })\r\n        \r\n            \r\n        })\r\n        \r\n        const co2Query = queryFunctions.createCompleteQuery(countries_list, [\"EN.ATM.CO2E.KT\"], [2016]);\r\n        const countryCO2Aggregator = queryFunctions.getAggregatedData(co2Query)\r\n        .then(co2_results => {\r\n            const filteredCO2 = queryFunctions.filterRegionAPIResponse(co2_results);\r\n            const {values, ids} = queryFunctions.dataExtraction(filteredCO2);\r\n            // console.log(\"\\n\")\r\n            // console.log(\"CO2 Emissions\")\r\n            // console.log(\"Length:\", values.length);\r\n            // console.log(\"Length:\", values)\r\n            // console.log(\"\\n\")\r\n            if(values[0]) {\r\n                console.log(\"CO2 emissions received\")\r\n                queryDispatch({type:ACTIONS.co2, payload:{value:values[0]}}) \r\n            } else {\r\n                queryDispatch({type:ACTIONS.nan})\r\n            }\r\n\r\n        \r\n        \r\n        })\r\n\r\n        // World Query \r\n        const workdApiQuery = queryFunctions.createCompleteQuery(world_list, indicators_list, date_list);\r\n        const worldSectionResults = queryFunctions.getAggregatedData(workdApiQuery)\r\n\r\n        .then(results =>{\r\n            const filteredResults = queryFunctions.filterRegionAPIResponse(results);\r\n            const {allValues, allIds} = queryFunctions.dataExtraction(filteredResults, indicators_list);\r\n            allValues.forEach((item, index)=>{\r\n                // console.log(indicator_names_list[index]);\r\n                // console.log(\"Length:\", allIds[index].length);\r\n                // console.log(\"Value:\", item)\r\n                // console.log(\"\\n\")\r\n                if(item[0]){\r\n                    console.log(indicator_names_list[index])\r\n                    worldQueryDispatch({type:indicators_list[index], payload:{value:item[0]}})\r\n                } else {\r\n                    worldQueryDispatch({type:ACTIONS.nan})\r\n                }\r\n            })\r\n        \r\n            \r\n        })\r\n        \r\n        const worldCo2Query = queryFunctions.createCompleteQuery(world_list, [\"EN.ATM.CO2E.KT\"], [2016]);\r\n        const worldCO2Aggregator = queryFunctions.getAggregatedData(worldCo2Query)\r\n        .then(co2_results => {\r\n            const filteredCO2 = queryFunctions.filterRegionAPIResponse(co2_results);\r\n            const {values, ids} = queryFunctions.dataExtraction(filteredCO2);\r\n            // console.log(\"\\n\")\r\n            // console.log(\"CO2 Emissions\")\r\n            // console.log(\"Length:\", values.length);\r\n            // console.log(\"Length:\", values)\r\n            // console.log(\"\\n\")\r\n            if(values[0]) {\r\n                console.log(\"World CO2 emissions received\")\r\n                worldQueryDispatch({type:ACTIONS.co2, payload:{value:values[0]}}) \r\n            } else {\r\n                worldQueryDispatch({type:ACTIONS.nan})\r\n            }\r\n\r\n        \r\n        \r\n        })\r\n        \r\n        }\r\n\r\n    // AI prediction \r\n    function getAIPredictions(countries_list){\r\n        \r\n        // Controls \r\n        const indicators_list = [\"NY.GDP.MKTP.CD\"];\r\n        const indicator_names_list = [\"GDP\"]\r\n        const date_list = [2012, 2019];\r\n\r\n        const apiQuery = queryFunctions.createCompleteQuery(countries_list, indicators_list, date_list);\r\n        const countrySectionResults = queryFunctions.getAggregatedData(apiQuery)\r\n        .then( async function(results){\r\n            const filteredResults = queryFunctions.filterRegionAPIResponse(results);\r\n            const {allValues, allIds} = queryFunctions.dataExtraction(filteredResults, indicators_list);\r\n            allValues.forEach((item, index)=>{\r\n                console.log(indicator_names_list[index]);\r\n                console.log(\"Length:\", allIds[index].length);\r\n                console.log(\"Value:\", item)\r\n                console.log(\"\\n\")\r\n            })\r\n\r\n            queryDispatch({type:ACTIONS.gdp_series, payload:{\r\n                value:allValues[0]\r\n            }})\r\n\r\n            const preprocessed_inputs = preprocessingAIInput(allValues[0])\r\n            const predictions = await makeAIModelRequestFetch(preprocessed_inputs);\r\n            const final_prediction = preprocessingOutputs(predictions);\r\n            queryDispatch({type:ACTIONS.gdp_prediction, payload:{\r\n                value:final_prediction\r\n            }})\r\n            console.log(predictions)\r\n            //const final_prediction = preprocessingOutputs(predictions);\r\n            // queryDispatch({type:ACTIONS.gdp_prediction, payload:{\r\n            //     value:final_prediction\r\n            // }})\r\n            //console.log(final_prediction)\r\n            //console.log(predictions)\r\n                \r\n    })}\r\n\r\n    function oneCountryQueryHandler(e){\r\n        oneCountrySection([formState.country], [parseInt(formState.year)])\r\n        getAIPredictions([formState.country])\r\n    }\r\n    \r\n\r\n    \r\n\r\n    // function getAIPredictiosHandler(e){\r\n    //     getAIPredictions([formState.country])\r\n    // }\r\n    return (\r\n        <div className=\"country-indepth\">\r\n            <div className=\"country-indepth-text container\">\r\n                <h2>Country Indepth</h2>\r\n                <p>Get an in-depth analysis of a country. To get a current day analysis, set the year to latest year </p>\r\n                \r\n            </div>\r\n            <form className=\"country-indepth-settings  container\" \r\n                id=\"country-indepth-settings\"\r\n                >\r\n                <fieldset className=\"box-shadow\">\r\n\r\n                    <div className=\"fieldset-item\">\r\n                        <select id=\"country-indepth-country\"\r\n                            onInput={(e)=>dispatch({type:ACTIONS.countryChange, payload:{value:e.target.value}})}\r\n                        >\r\n                            \r\n\r\n                            {countries.map((item, index)=>(\r\n                                <option id={countriesIds[index]} value={countriesIds[index]}>{item}</option>\r\n                            ))}\r\n                        </select>\r\n                        <label htmlFor=\"country-indepth-country\">Country:</label>\r\n                    </div>\r\n\r\n\r\n                    <div className=\"fieldset-item\">\r\n                        <input type=\"range\" \r\n                        id=\"country-indepth-year\"\r\n                        max=\"2019\"\r\n                        min=\"1960\"\r\n                        onInput={(e)=>dispatch({type:ACTIONS.yearChange,  payload:{value:e.target.value}})}\r\n                        \r\n                        \r\n\r\n                        />\r\n                        <label htmlFor=\"country-indepth-year\">Year:</label>\r\n\r\n                        {/* <span>{formState.year}</span> */}\r\n                    </div>\r\n\r\n                    <div className=\"fieldset-item\">\r\n                        <p>{formState.year}</p>\r\n                    </div>\r\n\r\n                </fieldset>\r\n\r\n                <a\r\n                href=\"#one-country-analyze\"\r\n                id=\"one-country-analyze\"\r\n                className=\"analyze\"\r\n                onClick={oneCountryQueryHandler}\r\n                >Analyze</a>\r\n\r\n\r\n            </form>\r\n                <OneCountryResults \r\n                queryState = {queryState}\r\n                worldQueryState = {worldQueryState}\r\n                indicatorNames = {indicatorNames}\r\n                countryName = {codeToCountryName[formState.country]}\r\n                />\r\n\r\n            \r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.memo(OneCountry);","import React from 'react';\r\nimport {Doughnut} from 'react-chartjs-2';\r\n\r\n\r\n// Utility \r\n\r\nconst argSort = (arr1, arr2) => arr1\r\n    .map((item, index) => [arr2[index], item]) // add the args to sort by\r\n    .sort(([arg1], [arg2]) => arg2 - arg1) // sort by the args\r\n    .map(([, item]) => item);\r\n\r\n\r\n\r\nconst DoughnutChart = (props)=>{\r\n\r\n    // Getting the Props \r\n    const indicatorNames = props.indicatorNames;\r\n    const state = props.state;\r\n\r\n    const dataArray = [];\r\n    Object.keys(state).forEach((item)=>{\r\n        dataArray.push(state[item])\r\n    })\r\n\r\n    // MOdification => Remoing the usage of indicatorNames\r\n    const labelsArray = [];\r\n    Object.keys(state).forEach((item)=>{\r\n        labelsArray.push(item)\r\n    })\r\n    \r\n    const sortedLabelsArray = argSort(labelsArray, dataArray);\r\n    const sortedDataArray = argSort(dataArray, dataArray)\r\n    \r\n    // Colors\r\n    let backgroundColor, color;\r\n    if(props.settings){\r\n        backgroundColor = props.settings.backgroundColor? props.settings.backgroundColor:'rgba(75,192,192,1)';\r\n        color = props.settings.color?props.settings.color: 'rgba(0, 0, 0, 0.1)'\r\n        }\r\n\r\n    // Color family \r\n    const colorFamily = [\"#770F88\",\"#862A95\",\"#9544A2\",\"#A45FB0\",\"#B37ABD\",\"#C394CA\",\"#D2AFD7\",\"#E1CAE5\",\"#F0E4F2\",\"#FFFFFF\"]\r\n\r\n    // Data \r\n    const data  = {\r\n        labels: sortedLabelsArray,\r\n        datasets:[\r\n            {\r\n            label:props.indicatorName,  // Give Country Name\r\n            data: sortedDataArray,\r\n            backgroundColor: colorFamily,\r\n            // borderColor: 'rgba(0,0,0,1)',\r\n            borderWidth:1\r\n        }, \r\n    \r\n    ]\r\n    }\r\n\r\n    // Options\r\n    const options = {\r\n        scales:{\r\n            y: {beginAtZero: true}\r\n\r\n        },\r\n        maintainAspectRatio:true\r\n\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <Doughnut \r\n        data = {data}\r\n        options = {options}\r\n        />\r\n    )\r\n}\r\n\r\nexport default DoughnutChart","import React from 'react'\r\nimport DoughnutChart from './DoughnutChart';\r\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet'\r\n\r\n// Utility Visualization \r\nconst argSort = (arr1, arr2) => arr1\r\n    .map((item, index) => [arr2[index], item]) // add the args to sort by\r\n    .sort(([arg1], [arg2]) => arg2 - arg1) // sort by the args\r\n    .map(([, item]) => item);\r\n\r\nfunction sortWithIndeces(toSort) {\r\n  for (var i = 0; i < toSort.length; i++) {\r\n    toSort[i] = [toSort[i], i];\r\n  }\r\n  toSort.sort(function(left, right) {\r\n    return left[0] < right[0] ? -1 : 1;\r\n  });\r\n  toSort.sortIndices = [];\r\n  for (var j = 0; j < toSort.length; j++) {\r\n    toSort.sortIndices.push(toSort[j][1]);\r\n    toSort[j] = toSort[j][0];\r\n  }\r\n  return toSort;\r\n}\r\n\r\nconst dsu = (arr1, arr2) => arr1\r\n  .map((item, index) => [arr2[index], item]) // add the args to sort by\r\n  .sort(([arg1], [arg2]) => arg2 - arg1) // sort by the args\r\n  .map(([, item]) => item); // extract the sorted items\r\n\r\n\r\nconst MapVisualization = (props)=>{\r\n\r\n    // Get the data \r\n    const state = props.state\r\n    const indicatorName = props.indicatorName\r\n    const vizId = props.id;\r\n\r\n    let doughnutChartState = {};\r\n    // Aggregating and sorting the data \r\n    if(Object.keys(state).length){\r\n        const valuesArray = state.slice(1, )\r\n        const countries = valuesArray.map((item, index)=>{\r\n            return (item[0]) \r\n        })\r\n        const values = valuesArray.map((item, index)=>{\r\n            return (item[1])\r\n        })\r\n\r\n        const sortCountries = dsu(countries, values)\r\n        const sortedValues = dsu(values, values)\r\n\r\n        sortCountries.slice(0, 9).forEach((country, index)=>{\r\n            doughnutChartState[country] = sortedValues[index]\r\n        })\r\n\r\n        console.log(doughnutChartState)\r\n    // console.log(indicatorName, sortCountries)\r\n    // Convert data into top three and others \r\n}\r\n    \r\n\r\n    // Conditional REndering \r\n    function renderViz(isTrue){\r\n        if(isTrue){\r\n            return (\r\n                <DoughnutChart \r\n                    state = {doughnutChartState}\r\n                />\r\n            )\r\n        }\r\n        return <p>Loading</p>\r\n    }\r\n\r\n    return (\r\n\r\n    <div class=\"doughnut-viz\" id={vizId}>\r\n        <h4>{indicatorName}</h4>\r\n        <DoughnutChart\r\n        state = {doughnutChartState}\r\n        indicatorName = {props.indicatorName}\r\n        />\r\n    </div>\r\n  \r\n        \r\n    )\r\n}\r\n\r\n\r\nexport default MapVisualization;","import React, { useEffect } from 'react';\r\nimport {useReducer} from 'react';\r\n\r\n// One Country Fetch Function \r\nimport * as queryFunctions from './functions/finalQueries'\r\n\r\n// Import Map component \r\nimport MapVisualization  from './MapVisualization';\r\n\r\n// Importing the GeoJSON file \r\n// import worldsGeoJson from './arrays/all_countries.geo.json';\r\n\r\n// Import the popular section Indicators\r\nimport codeToCountryName from \"./arrays/COUNTRIES_ONLY_CODE_TO_NAME.json\"\r\nimport popularIndicatorNameToCode from \"./arrays/POPULAR_SECTION_INDICATOR_NAMES.json\"\r\n\r\nconst popularIndicatorNames = Object.keys(popularIndicatorNameToCode);\r\nconst popularIndicatorCodes = Object.keys(popularIndicatorNameToCode)\r\n\r\n\r\n// Utility \r\nfunction strip(string) {\r\n    return string.replace(/\\s/g, '');\r\n}\r\n\r\n\r\n// Handlers \r\nfunction handlerQuery(state, action){\r\n    let newState = {...state};\r\n    newState[action.type] = action.payload.value;\r\n    return newState\r\n}\r\n\r\n// Reducers \r\nfunction popularPageQueryReducer(state, action ){\r\n    switch(action.type){\r\n        default:\r\n            return handlerQuery(state, action)\r\n    }\r\n}\r\n\r\n// Initial State\r\nconst POPULAR_QUERY_INITIAL_STATE = {\r\n    \"FP.CPI.TOTL.ZG\":\"\",\r\n    \"NY.GDP.PCAP.CD\":\"\",\r\n    \"NY.GDP.PCAP.PP.CD\":\"\", \r\n    \"NY.GNP.MKTP.CD\":\"\", \r\n    \"NY.GNP.PCAP.PP.CD\":\"\",  \r\n    \"SP.POP.TOTL\":\"\",\r\n    \"SP.DYN.LE00.IN\":\"\"\r\n}\r\n\r\n\r\n//  const POPULAR_SECTION_INDICATORS=[\"FP.CPI.TOTL.ZG\", \"NY.GDP.PCAP.CD\",  \"NY.GDP.PCAP.PP.CD\", \"NY.GNP.MKTP.CD\", \"NY.GNP.PCAP.PP.CD\",  \"SP.POP.TOTL\", \"SP.DYN.LE00.IN\"]\r\n\r\n//     const INDICATOR_NAMES=[\"Inflation\"\r\n//         , \"GDP per capita\"\r\n//         , \"GDP per capita PPP\" \r\n//         , \"GNI\" \r\n//         , \"GNI per capita, 2010 constant prices\"\r\n//         , \"Population\" \r\n//         , \"Life expectance\" \r\n//     ];\r\n\r\n\r\n\r\n\r\nconst PopularPage = ()=>{\r\n\r\n    // Constants\r\n    const POPULAR_SECTION_INDICATORS=[\"FP.CPI.TOTL.ZG\",\r\n    \"NY.GDP.PCAP.CD\",  \r\n    \"NY.GDP.PCAP.PP.CD\", \r\n    \"NY.GNP.MKTP.CD\", \r\n    \"NY.GNP.PCAP.PP.CD\",  \r\n    \"SP.POP.TOTL\", \r\n    \"SP.DYN.LE00.IN\"]\r\n\r\n   const INDICATOR_NAMES=[\"Inflation\"\r\n       , \"GDP per capita\"\r\n       , \"GDP per capita PPP\" \r\n       , \"GNI\" \r\n       , \"GNI per capita, 2010 CP\"\r\n       , \"Population\" \r\n       , \"Life expectance\" \r\n   ];\r\n\r\n   const vizIds = [\r\n       \"popular-section-Inflation-viz\",\r\n       \"popular-section-GDP-viz\",\r\n       \"popular-section-GDPpercapita-viz\",\r\n       \"popular-section-GDPpercapitaPPP-viz\",\r\n       \"popular-section-GNIpercapita-viz\",\r\n       \"popular-section-Population-viz\",\r\n       \"popular-section-LifeExpectancy-viz\",\r\n   ]\r\n\r\n    // State for Popualar Section \r\n    const [popularQueryState, dispatchQuery] = useReducer(popularPageQueryReducer, POPULAR_QUERY_INITIAL_STATE)\r\n    \r\n    // // Get the Query Functions\r\n    function popularSection(DATE_LIST=[2019]){\r\n    const POPULAR_SECTION_COUNTRIES = [\"AFG\", \"ALB\", \"DZA\", \"ASM\", \"AND\", \"AGO\", \"ATG\", \"ARG\", \"ARM\", \"ABW\", \"AUS\", \"AUT\", \"AZE\", \"BHS\", \"BHR\", \"BGD\", \"BRB\", \"BLR\", \"BEL\", \"BLZ\", \"BEN\", \"BMU\", \"BTN\", \"BOL\", \"BIH\", \"BWA\", \"BRA\", \"VGB\", \"BRN\", \"BGR\", \"BFA\", \"BDI\", \"CPV\", \"KHM\", \"CMR\", \"CAN\", \"CYM\", \"CAF\", \"TCD\", \"CHI\", \"CHL\", \"CHN\", \"COL\", \"COM\", \"COD\", \"COG\", \"CRI\", \"CIV\", \"HRV\", \"CUB\", \"CUW\", \"CYP\", \"CZE\", \"DNK\", \"DJI\", \"DMA\", \"DOM\", \"ECU\", \"EGY\", \"SLV\", \"GNQ\", \"ERI\", \"EST\", \"SWZ\", \"ETH\", \"FRO\", \"FJI\", \"FIN\", \"FRA\", \"PYF\", \"GAB\", \"GMB\", \"GEO\", \"DEU\", \"GHA\", \"GIB\", \"GRC\", \"GRL\", \"GRD\", \"GUM\", \"GTM\", \"GIN\", \"GNB\", \"GUY\", \"HTI\", \"HND\", \"HKG\", \"HUN\", \"ISL\", \"IND\", \"IDN\", \"IRN\", \"IRQ\", \"IRL\", \"IMN\", \"ISR\", \"ITA\", \"JAM\", \"JPN\", \"JOR\", \"KAZ\", \"KEN\", \"KIR\", \"PRK\", \"KOR\", \"XKX\", \"KWT\", \"KGZ\", \"LAO\", \"LVA\", \"LBN\", \"LSO\", \"LBR\", \"LBY\", \"LIE\", \"LTU\", \"LUX\", \"MAC\", \"MDG\", \"MWI\", \"MYS\", \"MDV\", \"MLI\", \"MLT\", \"MHL\", \"MRT\", \"MUS\", \"MEX\", \"FSM\", \"MDA\", \"MCO\", \"MNG\", \"MNE\", \"MAR\", \"MOZ\", \"MMR\", \"NAM\", \"NRU\", \"NPL\", \"NLD\", \"NCL\", \"NZL\", \"NIC\", \"NER\", \"NGA\", \"MKD\", \"MNP\", \"NOR\", \"OMN\", \"PAK\", \"PLW\", \"PAN\", \"PNG\", \"PRY\", \"PER\", \"PHL\", \"POL\", \"PRT\", \"PRI\", \"QAT\", \"ROU\", \"RUS\", \"RWA\", \"WSM\", \"SMR\", \"STP\", \"SAU\", \"SEN\", \"SRB\", \"SYC\", \"SLE\", \"SGP\", \"SXM\", \"SVK\", \"SVN\", \"SLB\", \"SOM\", \"ZAF\", \"SSD\", \"ESP\", \"LKA\", \"KNA\", \"LCA\", \"MAF\", \"VCT\", \"SDN\", \"SUR\", \"SWE\", \"CHE\", \"SYR\", \"TJK\", \"TZA\", \"THA\", \"TLS\", \"TGO\", \"TON\", \"TTO\", \"TUN\", \"TUR\", \"TKM\", \"TCA\", \"TUV\", \"UGA\", \"UKR\", \"ARE\", \"GBR\", \"USA\", \"URY\", \"UZB\", \"VUT\", \"VEN\", \"VNM\", \"VIR\", \"PSE\", \"YEM\", \"ZMB\", \"ZWE\"];\r\n    const POPULAR_SECTION_INDICATORS=[\"FP.CPI.TOTL.ZG\",\r\n     \"NY.GDP.PCAP.CD\",  \r\n     \"NY.GDP.PCAP.PP.CD\", \r\n     \"NY.GNP.MKTP.CD\", \r\n     \"NY.GNP.PCAP.PP.CD\",  \r\n     \"SP.POP.TOTL\", \r\n     \"SP.DYN.LE00.IN\"]\r\n\r\n    const INDICATOR_NAMES=[\"Inflation\"\r\n        , \"GDP per capita\"\r\n        , \"GDP per capita PPP\" \r\n        , \"GNI\" \r\n        , \"GNI per capita, 2010 constant prices\"\r\n        , \"Population\" \r\n        , \"Life expectance\" \r\n    ];\r\n\r\n    console.log(\"CODES \", POPULAR_SECTION_INDICATORS.length)\r\n    console.log(\"NAMES\", INDICATOR_NAMES.length)\r\n\r\n    const popualar_section_query  = queryFunctions.createCompleteQuery(POPULAR_SECTION_COUNTRIES, POPULAR_SECTION_INDICATORS, DATE_LIST)\r\n    const popular_section_results = queryFunctions.getAggregatedData(popualar_section_query)\r\n        .then((results)=>{\r\n            const filteredResults = queryFunctions.filterRegionAPIResponse(results);\r\n            const {allValues, allIds} = queryFunctions.dataExtraction(filteredResults, POPULAR_SECTION_INDICATORS);\r\n            allValues.forEach((item, index)=>{\r\n                const popular_section_indicator_name = INDICATOR_NAMES[index];\r\n                const ids = allIds[index]\r\n                const countryNameToValue = []\r\n                item.forEach((value, itemIndex)=>{\r\n                    const countryId = ids[itemIndex];\r\n                    const countryName = codeToCountryName[countryId];\r\n                    const dataPoint = [countryName, value]\r\n                    countryNameToValue.push(dataPoint)\r\n                    // countryNameToValue[codeToCountryName[countryId]] = value\r\n                })\r\n\r\n                countryNameToValue.unshift([\"Country\", \"Value\"])\r\n                // console.log(countryNameToValue)\r\n\r\n                dispatchQuery({type:POPULAR_SECTION_INDICATORS[index], payload:{value:countryNameToValue}})\r\n                \r\n                // // Detailed Logging \r\n                // console.log(popular_section_indicator_name);\r\n                // console.log(POPULAR_SECTION_INDICATORS[index])\r\n                // console.log(\"Length:\", Object.keys(countryNameToValue).length);\r\n\r\n            }) \r\n        })\r\n\r\n    }\r\n\r\n    useEffect(()=>{\r\n        popularSection()\r\n    }, [])\r\n\r\n    // Calculate maximum width \r\n    function getWidth() {\r\n        return Math.max(\r\n          document.body.scrollWidth,\r\n          document.documentElement.scrollWidth,\r\n          document.body.offsetWidth,\r\n          document.documentElement.offsetWidth,\r\n          document.documentElement.clientWidth\r\n        );\r\n      }\r\n      \r\n      function getHeight() {\r\n        return Math.max(\r\n          document.body.scrollHeight,\r\n          document.documentElement.scrollHeight,\r\n          document.body.offsetHeight,\r\n          document.documentElement.offsetHeight,\r\n          document.documentElement.clientHeight\r\n        );\r\n      }\r\n      \r\n      console.log('Width:  ' +  getWidth() );\r\n      console.log('Height: ' + getHeight() );\r\n\r\n    // Visualizaion Settings\r\n    const options = {\r\n        // title:\"\",\r\n\r\n        colorAxis:{ colors:[\"#B4416B\"]   },\r\n        backgroundColor:\"F2EDF0\",\r\n        datalessRegionColor:\"var(--clr-surface-1-card)\", // Default\r\n        defaultClor:\"#B4416B\"\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"popular-section\">\r\n            <div className=\"section-text container\">\r\n                <h2>Popular Section</h2>\r\n                <p>Select the required indicator</p>\r\n            </div>\r\n\r\n            <div className=\"box-shadow popular-section-settings container\">\r\n                \r\n                <div className=\"settings-row\">\r\n                    {\r\n                    \r\n                        INDICATOR_NAMES.slice(0, 4).map((name, index)=>{\r\n                            return (\r\n                                <a\r\n                                href={\"#popular-section-\"+strip(name)+\"-viz\"}\r\n                                id={popularIndicatorCodes[index]}\r\n                    \r\n                                >\r\n                                  {name}\r\n                                </a>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n\r\n                <div className=\"settings-row\">\r\n                    {\r\n                        INDICATOR_NAMES.slice(4).map((name, index)=>{\r\n                            return (\r\n                                <a\r\n                                href={\"#popular-section-\"+strip(name)+\"-viz\"}\r\n                                id={popularIndicatorCodes[index]}\r\n                    \r\n                                >\r\n                                  {name}\r\n                                </a>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n            </div>\r\n            \r\n            <div className=\"popular-section-visualizations scroll-snap-x container\">\r\n\r\n                    {\r\n                        Object.keys(popularQueryState).map((key, index)=>{\r\n                            return (\r\n                                <MapVisualization \r\n                                state = {popularQueryState[key]}\r\n                                indicator = {key}\r\n                                indicatorName = {INDICATOR_NAMES[index]}\r\n                                id = {\"popular-section-\"+strip(INDICATOR_NAMES[index])+\"-viz\"}\r\n                                />\r\n                            )\r\n                        })\r\n                    }\r\n                    \r\n                    \r\n                    \r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.memo(PopularPage)","import React from 'react';\r\nimport {useReducer, useEffect} from 'react';\r\n\r\n// Import BarChart & DoughnutChart for visualization \r\nimport BarChart from './BarChart';\r\nimport DoughnutChart from './DoughnutChart';\r\n\r\n// Import the requried functions \r\nimport * as queryFunctions from './functions/finalQueries'\r\n\r\n// Import the required arrays for Regions\r\nimport regionsCodeToName from './arrays/REGION_ONLY.json';\r\nimport worldAtAGlanceIndicatorNames from './arrays/WORLD_AT_GLANCE.json'\r\n\r\n// Utility \r\nfunction keyValueSwap(object){\r\n    let swapedKeyValue = {}\r\n    const keys = Object.keys(object);\r\n    const values = Object.values(object)\r\n    values.forEach((item, index)=>{\r\n        swapedKeyValue[item] = keys[index]\r\n    })\r\n    return swapedKeyValue\r\n} // Could be placed in the parent component\r\n\r\nconst indicatorCodeToName = keyValueSwap(worldAtAGlanceIndicatorNames)\r\n// State \r\nconst WAC_FORM = {\r\n    indicator:worldAtAGlanceIndicatorNames[\"Economic Growth\"]\r\n}\r\n\r\nconst WAC_QUERY = {\r\n    \"SP.POP.TOTL\":\"\",\r\n    \"NY.GDP.MKTP.KD.ZG\":\"\",\r\n    \"IQ.CPA.GNDR.XQ\":\"\"\r\n\r\n    \r\n}\r\n\r\n// ACTIONS\r\nconst WAC_ACTIONS = {\r\n    economic_growth:\"growth\",\r\n    population:\"populaton\", \r\n    gender_parity_index:\"gender_parity_index\",\r\n\r\n    population_query:\"SP.POP.TOTL\",\r\n    economic_growth_query:\"NY.GDP.MKTP.KD.ZG\",\r\n    gender_parity_index_query:\"IQ.CPA.GNDR.XQ\"\r\n\r\n    \r\n\r\n\r\n}\r\n\r\n// \"SP.POP.TOTL\":\"population_query\",\r\n// \"NY.GDP.MKTP.KD.ZG\":\"economic_growth_query\",\r\n// \"IQ.CPA.GNDR.XQ\":\"gender_parity_index\"\r\n\r\n// Handlers\r\nfunction formHandler(state, action){\r\n    let newState = {...state};\r\n    newState.indicator = action.payload.value;\r\n    return newState\r\n}\r\n\r\nfunction queryHandler(state, action){\r\n    let newState = {...state};\r\n    newState[action.type] = action.payload.value;\r\n    return newState\r\n}\r\n\r\n// Reducer\r\nfunction WACReducer(state, action){\r\n    switch(action.type){\r\n        case WAC_ACTIONS.population:\r\n            console.log(\"population WAC activated\")\r\n            return formHandler(state, action)\r\n        case WAC_ACTIONS.economic_growth:\r\n            return formHandler(state, action)\r\n        case WAC_ACTIONS.gender_parity_index:\r\n            return formHandler(state, action)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nfunction WACQueryReducer(state, action){\r\n    switch(action.type){\r\n        case WAC_ACTIONS.population_query:\r\n            return queryHandler(state, action)\r\n        case WAC_ACTIONS.economic_growth_query:\r\n            return queryHandler(state, action)\r\n        case WAC_ACTIONS.gender_parity_index_query:\r\n            return queryHandler(state, action)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst WorldAtAGlancePage = ()=>{\r\n\r\n    // State \r\n    const [WACFormState, WACDispatch] = useReducer(WACReducer, WAC_FORM)\r\n    const [WACQueryState, WACDispatchQuery] = useReducer(WACQueryReducer, WAC_QUERY)\r\n\r\n    // World At a Glance Section \r\n    function worldAtAGlanceSection(LATEST_YEAR=2019){\r\n    \r\n        const regions_countries_list = [\"ARB\", \"EAS\", \"ECS\", \"LCN\", \"MEA\", \"NAC\", \"PSS\", \"SAS\", \"SSF\"];\r\n        const regions_indicators_list = [\"NY.GDP.MKTP.KD.ZG\", \"IQ.CPA.GNDR.XQ\", \"SP.POP.TOTL\"];\r\n        const region_indicator_names_list = [\"Economic Growth\", \"Gender Parity Index\", \"Total Population\"]\r\n        const date_list = [LATEST_YEAR];\r\n        \r\n        const regions_api_query  = queryFunctions.createCompleteQuery(regions_countries_list, regions_indicators_list, date_list)\r\n        const regions_data_results = queryFunctions.getAggregatedData(regions_api_query)\r\n        .then((results)=>{\r\n            const filteredResults = queryFunctions.filterRegionAPIResponse(results);\r\n            const {allValues, allIds} = queryFunctions.dataExtraction(filteredResults, regions_indicators_list);\r\n            allValues.forEach((item, index)=>{\r\n                const region_indicator_name = region_indicator_names_list[index];\r\n                const ids = allIds[index]\r\n                const regionNameToValue = {}\r\n                item.forEach((value, itemIndex)=>{\r\n                    regionNameToValue[ids[itemIndex]] = value\r\n                })\r\n\r\n                WACDispatchQuery({type:regions_indicators_list[index], payload:{value:regionNameToValue}})\r\n                \r\n                // // Detailed Logging \r\n                // console.log(region_indicator_name);\r\n                // console.log(regions_indicators_list[index])\r\n                // console.log(\"Length:\", Object.keys(regionNameToValue).length);\r\n\r\n            })\r\n        \r\n            // const regions_literacy_api_query  = queryFunctions.createCompleteQuery(regions_countries_list, [\"SE.ADT.LITR.ZS\"], [2016])\r\n            // const regions_literacy_data_results = queryFunctions.getAggregatedData(regions_literacy_api_query)\r\n            // .then(results=>{\r\n            //     const filteredLiteracyResults = queryFunctions.filterRegionAPIResponse(results);\r\n            //     const {values, ids} = queryFunctions.dataExtraction(filteredLiteracyResults);\r\n            //     console.log(\"\\n\")\r\n            //     console.log(\"Literacy Rate\")\r\n            //     console.log(\"Length:\", values.length);\r\n            //     console.log(\"Length:\", values)\r\n            //     console.log(\"\\n\")\r\n            //     console.log(ids)\r\n            //     const selectedElement = elementsArray[-1];\r\n            //     const text = `${region_indicator_name}: ${regionMaxName} => ${regionMaxValue}`;\r\n            //     selectedElement.textContent = text;\r\n            // })\r\n        })\r\n        }\r\n\r\n    // Run once on mount\r\n    useEffect(()=>{\r\n        worldAtAGlanceSection()\r\n    }, [])\r\n\r\n    // Visualizations\r\n\r\n\r\n    return (\r\n        <div className=\"world-at-a-glance\">\r\n            <div className=\"section-text container\">\r\n                <h2>World At A Glance</h2>\r\n                <p>Take a glance at the economic, social and gender situation of different world\r\n                regions</p>\r\n            </div>\r\n            \r\n            <div className=\"snap-tabs container\">\r\n                <div className=\"world-at-a-glance-settings box-shadow\">\r\n                <a href=\"#world-at-a-glance-economic-growth-viz\" \r\n                id=\"world-at-a-glance-economic-growth\"\r\n                className=\"world-at-a-glance-fieldset\"\r\n                onClick={(e)=>WACDispatch({type:WAC_ACTIONS.economic_growth, payload:{value:worldAtAGlanceIndicatorNames[\"Economic Growth\"]}})}\r\n                >Economic Growth</a>\r\n\r\n                <a href=\"#world-at-a-glance-population-viz\" \r\n                id=\"world-at-a-glance-population\"\r\n                className=\"world-at-a-glance-fieldset\"\r\n                onClick={(e)=>WACDispatch({type:WAC_ACTIONS.population, payload:{value:worldAtAGlanceIndicatorNames[\"Population\"]}})}\r\n                >Population</a>\r\n                \r\n                <a href=\"#world-at-a-glance-gender-parity-index-viz\" \r\n                id=\"world-at-a-glance-gender-parity-index\"\r\n                className=\"world-at-a-glance-fieldset\"\r\n                onClick={(e)=>WACDispatch({type:WAC_ACTIONS.gender_parity_index, payload:{value:worldAtAGlanceIndicatorNames[\"Gender Parity Index\"]}})}\r\n                >Gender Parity Index</a>\r\n            </div>\r\n\r\n                <div className=\"world-at-a-glance-visualizations scroll-snap-x\">\r\n                <section id=\"world-at-a-glance-economic-growth-viz\">\r\n                    <BarChart\r\n                    className=\"world-at-a-glance-canvas\"\r\n                    state={WACQueryState[\"NY.GDP.MKTP.KD.ZG\"]}\r\n                    indicatorNames={regionsCodeToName}\r\n                    countryName={indicatorCodeToName[\"NY.GDP.MKTP.KD.ZG\"]}\r\n                    world={false}\r\n                    settings = {\r\n                        {\r\n                            backgroundColor:\"#E7C864\",\r\n                            color:\"#A1A1A1\"\r\n                        }\r\n                    }\r\n                    />\r\n\r\n                    {/* <DoughnutChart \r\n                    state={WACQueryState[\"NY.GDP.MKTP.KD.ZG\"]}\r\n                    indicatorNames={regionsCodeToName}\r\n                    countryName={indicatorCodeToName[\"NY.GDP.MKTP.KD.ZG\"]}\r\n                    settings = {{\r\n                        backgroundColor:\"#E7C864\"\r\n                    }}\r\n                    /> */}\r\n                </section>\r\n\r\n                <section id=\"world-at-a-glance-population-viz\">\r\n                    <BarChart\r\n                    className=\"world-at-a-glance-canvas\"\r\n                    state={WACQueryState[\"SP.POP.TOTL\"]}\r\n                    indicatorNames={regionsCodeToName}\r\n                    countryName={indicatorCodeToName[\"SP.POP.TOTL\"]}\r\n                    world={false}\r\n                    settings = {\r\n                        {\r\n                            backgroundColor:\"#E7C864\",\r\n                            color:\"#A1A1A1\"\r\n                        }\r\n                    }\r\n                    />\r\n\r\n                    {/* <DoughnutChart \r\n                    state={WACQueryState[\"SP.POP.TOTL\"]}\r\n                    indicatorNames={regionsCodeToName}\r\n                    countryName={indicatorCodeToName[\"SP.POP.TOTL\"]}\r\n                    settings = {{\r\n                        backgroundColor:\"#E7C864\"\r\n                    }}\r\n                    /> */}\r\n                </section>\r\n\r\n                <section id=\"world-at-a-glance-gender-parity-index-viz\">\r\n                    <BarChart\r\n                    className=\"world-at-a-glance-canvas\"\r\n                    state={WACQueryState[\"IQ.CPA.GNDR.XQ\"]}\r\n                    indicatorNames={regionsCodeToName}\r\n                    countryName={indicatorCodeToName[\"IQ.CPA.GNDR.XQ\"]}\r\n                    world={false}\r\n                    settings = {\r\n                        {\r\n                            backgroundColor:\"#E7C864\",\r\n                            color:\"#A1A1A1\"\r\n                        }\r\n                    }\r\n                    />\r\n\r\n\r\n                    {/* <DoughnutChart \r\n                    state={WACQueryState[\"IQ.CPA.GNDR.XQ\"]}\r\n                    indicatorNames={regionsCodeToName}\r\n                    countryName={indicatorCodeToName[\"IQ.CPA.GNDR.XQ\"]}\r\n                    settings = {{\r\n                        backgroundColor:\"#E7C864\"\r\n                    }}\r\n                    /> */}\r\n                </section>\r\n\r\n            </div>\r\n            </div>\r\n\r\n            \r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WorldAtAGlancePage;","import React from 'react';\nimport { useEffect } from 'react';\n\n\nimport './styles/style.css'\nimport LandingPage from './components/LandingPage'\nimport OneCountryPage from './components/OneCountry'\nimport PopularPage from './components/PopularPage'\nimport WorldAtAGlancePage from './components/WorldAtAGlance'\n\n// Add Popular Page Later\n\nfunction App() {\n  return (\n    <div>\n      <LandingPage />\n      <WorldAtAGlancePage />\n      <PopularPage />\n      <OneCountryPage />\n      \n    </div>\n    )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}